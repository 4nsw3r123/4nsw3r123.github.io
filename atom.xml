<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4nsw3r&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/8d2526d3abd4e05e8e5d09f817fee41d</icon>
  
  <link href="https://4nsw3r.top/atom.xml" rel="self"/>
  
  <link href="https://4nsw3r.top/"/>
  <updated>2022-02-03T09:30:13.776Z</updated>
  <id>https://4nsw3r.top/</id>
  
  <author>
    <name>4nsw3r</name>
    <email>2239888030@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SCTF REVERSE CplusExceptionEncrypt 赛后复现</title>
    <link href="https://4nsw3r.top/2022/02/03/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://4nsw3r.top/2022/02/03/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-02-03T09:26:38.502Z</published>
    <updated>2022-02-03T09:30:13.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SCTF-REVERSE-CplusExceptionEncrypt-赛后复现"><a href="#SCTF-REVERSE-CplusExceptionEncrypt-赛后复现" class="headerlink" title="SCTF REVERSE CplusExceptionEncrypt 赛后复现"></a>SCTF REVERSE CplusExceptionEncrypt 赛后复现</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>C++异常处理机制，如何 patch 代码使得 IDA 可以分析异常处理代码</p><h2 id="C-异常处理机制"><a href="#C-异常处理机制" class="headerlink" title="C++ 异常处理机制"></a>C++ 异常处理机制</h2><p>C++ 的异常处理机制非常灵活，相比于原来使用 SEH 等可以自定义异常类型等。不同编译器对 C++ 异常处理的编译结果不同。使用如下测试代码进行编译：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        std::cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span>(<span class="string">&quot;a==0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; msg&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MSVC-x86"><a href="#MSVC-x86" class="headerlink" title="MSVC x86"></a>MSVC x86</h3><p>对于 MSVC x86编译器，会变成类似 windows SEH 进行处理：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/msvctryx86.png"></p><p>使用<code>_CxxThrowException</code>函数抛出异常，之后在 SEH 异常处理器中捕获异常并转到异常处理代码中。而使用 IDA 进行反编译时，是无法正常分析出反编译结果的：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/msvctryx86d.png"></p><p>需要对汇编代码进行一些修改。将 0x401042 地址处的 call 指令修改为 jmp 到catch块内（0x401063），使得强制发生跳转，即可使得 IDA 进行分析：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/msvctryx86d2.png"></p><h3 id="MSVC-x64"><a href="#MSVC-x64" class="headerlink" title="MSVC x64"></a>MSVC x64</h3><p>MSVC x64 的情况较为复杂，其进行了更为严重的封装，暂时没找到什么好办法。</p><h3 id="Clang-x64"><a href="#Clang-x64" class="headerlink" title="Clang x64"></a>Clang x64</h3><p>clang x64 编译结果和 MSVC x86 相似，都是在代码中就可以看到 try 块内和 catch 块内的代码：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/clang.png"></p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/clangd.png"></p><p>对其进行处理也和 MSVC x86 一样，将 0x4015E8 处的 call 语句改成 jmp 到 catch 块内（0x4015F2）即可使 IDA 正常识别：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/clangd2.png"></p><h2 id="赛题复现"><a href="#赛题复现" class="headerlink" title="赛题复现"></a>赛题复现</h2><p>打开该文件后，发现伪代码中有 C++ 抛出异常的代码，却看不到任何的加密代码，猜测其使用C++异常处理将加密过程隐藏了。于是查看汇编，发现明显的C++异常处理特征，按照上述方法对代码进行 patch 处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *exception; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  struct_of_step1 *v5; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> **v7; <span class="comment">// rdx</span></span><br><span class="line">  struct_of_step2 *v8; <span class="comment">// rbx</span></span><br><span class="line">  struct_of_step3 *v9; <span class="comment">// rbx</span></span><br><span class="line">  last_struct *v10; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  enc_next_ready_struct *v13; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> **v14; <span class="comment">// rdx</span></span><br><span class="line">  enc_next_struct *v15; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v17; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *exception_ptr; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v19; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v21; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v22; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v23; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v26; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v27; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v28; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v29; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v30; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v31; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v32; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v33; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v34; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v35; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v36; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v37; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v38; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v39; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v40; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v41; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v42; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v43; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v44; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v45; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v46; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v47; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v48; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v49; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v50; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> *v51; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v52; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">uint8_t</span> *v53; <span class="comment">// rdx</span></span><br><span class="line">  <span class="built_in">std</span>::__cxx11::<span class="built_in">string</span> init; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  enc_next_struct_0 temp_4; <span class="comment">// [rsp+D0h] [rbp+50h]</span></span><br><span class="line">  enc_next_ready_struct_0 temp_3; <span class="comment">// [rsp+F0h] [rbp+70h]</span></span><br><span class="line">  <span class="keyword">uint8_t</span> key[<span class="number">16</span>]; <span class="comment">// [rsp+110h] [rbp+90h] BYREF</span></span><br><span class="line">  <span class="keyword">uint8_t</span> ciphertext[<span class="number">16</span>]; <span class="comment">// [rsp+120h] [rbp+A0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 out1[<span class="number">16</span>]; <span class="comment">// [rsp+130h] [rbp+B0h] BYREF</span></span><br><span class="line">  <span class="keyword">uint32_t</span> dst[<span class="number">4</span>]; <span class="comment">// [rsp+140h] [rbp+C0h] BYREF</span></span><br><span class="line">  <span class="keyword">uint32_t</span> inp[<span class="number">4</span>]; <span class="comment">// [rsp+150h] [rbp+D0h] BYREF</span></span><br><span class="line">  <span class="keyword">uint8_t</span> cmp_arr[<span class="number">32</span>]; <span class="comment">// [rsp+160h] [rbp+E0h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 encdata[<span class="number">32</span>]; <span class="comment">// [rsp+180h] [rbp+100h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> data[<span class="number">32</span>]; <span class="comment">// [rsp+1A0h] [rbp+120h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v65; <span class="comment">// [rsp+1C7h] [rbp+147h] BYREF</span></span><br><span class="line">  <span class="keyword">uint32_t</span> k3_0; <span class="comment">// [rsp+1C8h] [rbp+148h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> k2_0; <span class="comment">// [rsp+1CCh] [rbp+14Ch]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> k1_0; <span class="comment">// [rsp+1D0h] [rbp+150h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> k0_0; <span class="comment">// [rsp+1D4h] [rbp+154h]</span></span><br><span class="line">  <span class="keyword">int</span> length; <span class="comment">// [rsp+1D8h] [rbp+158h]</span></span><br><span class="line">  <span class="keyword">int</span> control1; <span class="comment">// [rsp+1DCh] [rbp+15Ch]</span></span><br><span class="line">  <span class="keyword">int</span> j_0; <span class="comment">// [rsp+1E0h] [rbp+160h]</span></span><br><span class="line">  <span class="keyword">int</span> i_1; <span class="comment">// [rsp+1E4h] [rbp+164h]</span></span><br><span class="line">  <span class="keyword">int</span> i_0; <span class="comment">// [rsp+1E8h] [rbp+168h]</span></span><br><span class="line">  <span class="keyword">int</span> x; <span class="comment">// [rsp+1ECh] [rbp+16Ch]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [rsp+1F0h] [rbp+170h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+1F4h] [rbp+174h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [rsp+1F8h] [rbp+178h]</span></span><br><span class="line">  <span class="keyword">int</span> cnt; <span class="comment">// [rsp+1FCh] [rbp+17Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+200h] [rbp+180h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> sum2; <span class="comment">// [rsp+204h] [rbp+184h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> sum1; <span class="comment">// [rsp+208h] [rbp+188h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v3; <span class="comment">// [rsp+20Ch] [rbp+18Ch]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v2; <span class="comment">// [rsp+210h] [rbp+190h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v1; <span class="comment">// [rsp+214h] [rbp+194h]</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v0; <span class="comment">// [rsp+218h] [rbp+198h]</span></span><br><span class="line">  <span class="keyword">int</span> w; <span class="comment">// [rsp+21Ch] [rbp+19Ch]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  control1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(data, <span class="number">0</span>, <span class="keyword">sizeof</span>(data));</span><br><span class="line">  <span class="built_in">memset</span>(encdata, <span class="number">0</span>, <span class="keyword">sizeof</span>(encdata));</span><br><span class="line">  <span class="built_in">memset</span>(cmp_arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(cmp_arr));</span><br><span class="line">  <span class="built_in">memset</span>(inp, <span class="number">0</span>, <span class="keyword">sizeof</span>(inp));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;---------------------Welcome_to_SCTF_2021---------------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag: \n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, data);</span><br><span class="line">  length = <span class="built_in">strlen</span>(data);</span><br><span class="line">  <span class="keyword">if</span> ( length != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length error!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  w = <span class="number">0</span>;</span><br><span class="line">LABEL_4:</span><br><span class="line">  <span class="keyword">if</span> ( w &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !w )</span><br><span class="line">    &#123;</span><br><span class="line">      inp[<span class="number">0</span>] = *(_DWORD *)data;</span><br><span class="line">      inp[<span class="number">1</span>] = *(_DWORD *)&amp;data[<span class="number">4</span>];</span><br><span class="line">      inp[<span class="number">2</span>] = *(_DWORD *)&amp;data[<span class="number">8</span>];</span><br><span class="line">      inp[<span class="number">3</span>] = *(_DWORD *)&amp;data[<span class="number">12</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( w == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      inp[<span class="number">0</span>] = *(_DWORD *)&amp;data[<span class="number">16</span>];</span><br><span class="line">      inp[<span class="number">1</span>] = *(_DWORD *)&amp;data[<span class="number">20</span>];</span><br><span class="line">      inp[<span class="number">2</span>] = *(_DWORD *)&amp;data[<span class="number">24</span>];</span><br><span class="line">      inp[<span class="number">3</span>] = *(_DWORD *)&amp;data[<span class="number">28</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    v0 = inp[<span class="number">0</span>];</span><br><span class="line">    v1 = inp[<span class="number">1</span>];</span><br><span class="line">    v2 = inp[<span class="number">2</span>];</span><br><span class="line">    v3 = inp[<span class="number">3</span>];</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dst, <span class="number">0</span>, <span class="keyword">sizeof</span>(dst));</span><br><span class="line">    <span class="built_in">memset</span>(out1, <span class="number">0</span>, <span class="keyword">sizeof</span>(out1));</span><br><span class="line">    exception = _cxa_allocate_exception(<span class="number">0x20</span>ui64);</span><br><span class="line">    <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v65);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(</span><br><span class="line">      exception,</span><br><span class="line">      <span class="string">&quot;init_part&quot;</span>,</span><br><span class="line">      &amp;v65);</span><br><span class="line">    v4 = (<span class="keyword">void</span> *)<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v65);</span><br><span class="line">    v17 = v4;</span><br><span class="line">    <span class="keyword">if</span> ( &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt; != (<span class="keyword">void</span> **)<span class="number">1</span> )</span><br><span class="line">      Unwind_Resume(v4);</span><br><span class="line">    exception_ptr = _cxa_get_exception_ptr(v4);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(&amp;init, exception_ptr);</span><br><span class="line">    _cxa_begin_catch(v17);</span><br><span class="line">    qmemcpy(key, <span class="string">&quot;Welcome_to_sctf!&quot;</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    k0_0 = *(_DWORD *)key;</span><br><span class="line">    k1_0 = *(_DWORD *)&amp;key[<span class="number">4</span>];</span><br><span class="line">    k2_0 = *(_DWORD *)&amp;key[<span class="number">8</span>];</span><br><span class="line">    k3_0 = *(_DWORD *)&amp;key[<span class="number">12</span>];</span><br><span class="line">    cmp_arr[<span class="number">0</span>] = <span class="number">-66</span>;</span><br><span class="line">    cmp_arr[<span class="number">1</span>] = <span class="number">28</span>;</span><br><span class="line">    cmp_arr[<span class="number">2</span>] = <span class="number">-77</span>;</span><br><span class="line">    cmp_arr[<span class="number">3</span>] = <span class="number">-13</span>;</span><br><span class="line">    cmp_arr[<span class="number">4</span>] = <span class="number">-95</span>;</span><br><span class="line">    cmp_arr[<span class="number">5</span>] = <span class="number">-12</span>;</span><br><span class="line">    cmp_arr[<span class="number">6</span>] = <span class="number">-28</span>;</span><br><span class="line">    cmp_arr[<span class="number">7</span>] = <span class="number">99</span>;</span><br><span class="line">    cmp_arr[<span class="number">8</span>] = <span class="number">17</span>;</span><br><span class="line">    cmp_arr[<span class="number">9</span>] = <span class="number">-31</span>;</span><br><span class="line">    cmp_arr[<span class="number">10</span>] = <span class="number">28</span>;</span><br><span class="line">    cmp_arr[<span class="number">11</span>] = <span class="number">107</span>;</span><br><span class="line">    cmp_arr[<span class="number">12</span>] = <span class="number">84</span>;</span><br><span class="line">    cmp_arr[<span class="number">13</span>] = <span class="number">10</span>;</span><br><span class="line">    cmp_arr[<span class="number">14</span>] = <span class="number">-33</span>;</span><br><span class="line">    cmp_arr[<span class="number">15</span>] = <span class="number">116</span>;</span><br><span class="line">    cmp_arr[<span class="number">16</span>] = <span class="number">-14</span>;</span><br><span class="line">    cmp_arr[<span class="number">17</span>] = <span class="number">-109</span>;</span><br><span class="line">    cmp_arr[<span class="number">18</span>] = <span class="number">85</span>;</span><br><span class="line">    cmp_arr[<span class="number">19</span>] = <span class="number">-38</span>;</span><br><span class="line">    cmp_arr[<span class="number">20</span>] = <span class="number">72</span>;</span><br><span class="line">    cmp_arr[<span class="number">21</span>] = <span class="number">-4</span>;</span><br><span class="line">    cmp_arr[<span class="number">22</span>] = <span class="number">-94</span>;</span><br><span class="line">    cmp_arr[<span class="number">23</span>] = <span class="number">60</span>;</span><br><span class="line">    cmp_arr[<span class="number">24</span>] = <span class="number">-119</span>;</span><br><span class="line">    qmemcpy(&amp;cmp_arr[<span class="number">25</span>], <span class="string">&quot;c.&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    cmp_arr[<span class="number">27</span>] = <span class="number">127</span>;</span><br><span class="line">    cmp_arr[<span class="number">28</span>] = <span class="number">-115</span>;</span><br><span class="line">    cmp_arr[<span class="number">29</span>] = <span class="number">-92</span>;</span><br><span class="line">    qmemcpy(&amp;cmp_arr[<span class="number">30</span>], <span class="string">&quot;mN&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;init);</span><br><span class="line">    _cxa_end_catch();</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">    <span class="keyword">if</span> ( i &lt;= <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      cnt = <span class="number">0</span>;</span><br><span class="line">      srand(<span class="number">0x53435446</span>u);</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        control1 = rand();</span><br><span class="line">        <span class="keyword">if</span> ( control1 == <span class="number">21000</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( control1 == <span class="number">26001</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = (struct_of_step1 *)_cxa_allocate_exception(<span class="number">1u</span>i64);</span><br><span class="line">          struct_of_step1::struct_of_step1(v5);</span><br><span class="line">          v7 = &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>struct_of_step1;</span><br><span class="line">          <span class="keyword">goto</span> catch_40273d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( control1 == <span class="number">4265</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v8 = (struct_of_step2 *)_cxa_allocate_exception(<span class="number">1u</span>i64);</span><br><span class="line">          struct_of_step2::struct_of_step2(v8);</span><br><span class="line">          v7 = &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>struct_of_step2;</span><br><span class="line">          <span class="keyword">goto</span> catch_40273d;</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_19:</span><br><span class="line">        <span class="keyword">if</span> ( ++cnt == <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          ++i;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v9 = (struct_of_step3 *)_cxa_allocate_exception(<span class="number">1u</span>i64);</span><br><span class="line">      struct_of_step3::struct_of_step3(v9);</span><br><span class="line">      v7 = &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>struct_of_step3;</span><br><span class="line">catch_40273d:</span><br><span class="line">      <span class="keyword">if</span> ( v7 == (<span class="keyword">void</span> **)<span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        _cxa_begin_catch(v6);</span><br><span class="line">        v19 = operation1(sum1, i);</span><br><span class="line">        v20 = operation4(v1);</span><br><span class="line">        v21 = operation1(v20, k3_0);</span><br><span class="line">        v22 = operation1(v1, sum1);</span><br><span class="line">        v23 = operation2(v1);</span><br><span class="line">        v24 = operation1(v23, k2_0);</span><br><span class="line">        v25 = operation3(v24, v22);</span><br><span class="line">        v26 = operation3(v25, v21);</span><br><span class="line">        v0 += operation3(v26, v19);</span><br><span class="line">        v27 = operation1(sum2, i);</span><br><span class="line">        v28 = operation4(v3);</span><br><span class="line">        v29 = operation1(v28, k3_0);</span><br><span class="line">        v30 = operation1(v3, sum2);</span><br><span class="line">        v31 = operation2(v3);</span><br><span class="line">        v32 = operation1(v31, k2_0);</span><br><span class="line">        v33 = operation3(v32, v30);</span><br><span class="line">        v34 = operation3(v33, v29);</span><br><span class="line">        v2 += operation3(v34, v27);</span><br><span class="line">        _cxa_end_catch();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v7 == (<span class="keyword">void</span> **)<span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        _cxa_begin_catch(v6);</span><br><span class="line">        v35 = operation1(sum1, i);</span><br><span class="line">        v36 = operation4(v0);</span><br><span class="line">        v37 = operation1(v36, k1_0);</span><br><span class="line">        v38 = operation1(v0, sum1);</span><br><span class="line">        v39 = operation2(v0);</span><br><span class="line">        v40 = operation1(v39, k0_0);</span><br><span class="line">        v41 = operation3(v40, v38);</span><br><span class="line">        v42 = operation3(v41, v37);</span><br><span class="line">        v1 += operation3(v42, v35);</span><br><span class="line">        v43 = operation1(sum2, i);</span><br><span class="line">        v44 = operation4(v2);</span><br><span class="line">        v45 = operation1(v44, k1_0);</span><br><span class="line">        v46 = operation1(v2, sum1);</span><br><span class="line">        v47 = operation2(v2);</span><br><span class="line">        v48 = operation1(v47, k0_0);</span><br><span class="line">        v49 = operation3(v48, v46);</span><br><span class="line">        v50 = operation3(v49, v45);</span><br><span class="line">        v3 += operation3(v50, v43);</span><br><span class="line">        _cxa_end_catch();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v7 != (<span class="keyword">void</span> **)<span class="number">2</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_65;</span><br><span class="line">        _cxa_begin_catch(v6);</span><br><span class="line">        sum1 = operation1(sum1, delta);</span><br><span class="line">        sum2 = operation1(sum2, delta);</span><br><span class="line">        _cxa_end_catch();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = (last_struct *)_cxa_allocate_exception(<span class="number">1u</span>i64);</span><br><span class="line">    text_84(v10);</span><br><span class="line">    <span class="keyword">if</span> ( &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;l</span>ast_struct != (<span class="keyword">void</span> **)<span class="number">6</span> )</span><br><span class="line">      Unwind_Resume(v11);</span><br><span class="line">    _cxa_begin_catch(v11);</span><br><span class="line">    dst[<span class="number">0</span>] = v0 ^ HIBYTE(delta);</span><br><span class="line">    dst[<span class="number">1</span>] = v1 ^ BYTE2(delta);</span><br><span class="line">    dst[<span class="number">2</span>] = v2 ^ BYTE1(delta);</span><br><span class="line">    dst[<span class="number">3</span>] = v3 ^ (<span class="keyword">unsigned</span> __int8)delta;</span><br><span class="line">    _cxa_end_catch();</span><br><span class="line">    m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; ++k )</span><br><span class="line">        out1[m++] = *((_BYTE *)&amp;dst[j] + k);</span><br><span class="line">    &#125;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    srand(<span class="number">0x53435446</span>u);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( x == <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !w )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span> ( i_0 = <span class="number">0</span>; i_0 &lt;= <span class="number">15</span>; ++i_0 )</span><br><span class="line">            encdata[i_0] = ciphertext[i_0];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( w == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span> ( i_1 = <span class="number">0</span>; i_1 &lt;= <span class="number">15</span>; ++i_1 )</span><br><span class="line">            encdata[i_1 + <span class="number">16</span>] = ciphertext[i_1];</span><br><span class="line">        &#125;</span><br><span class="line">        ++w;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">      &#125;</span><br><span class="line">      v12 = rand();</span><br><span class="line">      <span class="keyword">if</span> ( v12 == <span class="number">4265</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v15 = (enc_next_struct *)_cxa_allocate_exception(<span class="number">0x18</span>ui64);</span><br><span class="line">        enc_next_struct::enc_next_struct(v15, (<span class="keyword">uint8_t</span> *)&amp;init, out1, ciphertext);</span><br><span class="line">        v14 = &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>enc_next_struct;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v12 != <span class="number">26001</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_33;</span><br><span class="line">        v13 = (enc_next_ready_struct *)_cxa_allocate_exception(<span class="number">0x10</span>ui64);</span><br><span class="line">        enc_next_ready_struct::enc_next_ready_struct(v13, key, (<span class="keyword">uint8_t</span> *)&amp;init);</span><br><span class="line">        v14 = &amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>enc_next_ready_struct;</span><br><span class="line">      &#125;</span><br><span class="line">      v51 = v6;</span><br><span class="line">      <span class="keyword">if</span> ( v14 == (<span class="keyword">void</span> **)<span class="number">7</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v52 = _cxa_get_exception_ptr(v6);</span><br><span class="line">        v53 = (<span class="keyword">uint8_t</span> *)*((_QWORD *)v52 + <span class="number">1</span>);</span><br><span class="line">        temp_3.ourciphertext = *(<span class="keyword">uint8_t</span> **)v52;</span><br><span class="line">        temp_3.ourroundkeys = v53;</span><br><span class="line">        _cxa_begin_catch(v51);</span><br><span class="line">        enc_next_ready(temp_3.ourciphertext, temp_3.ourroundkeys);</span><br><span class="line">        _cxa_end_catch();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v14 != (<span class="keyword">void</span> **)<span class="number">8</span> )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_65:</span><br><span class="line">          _cxa_begin_catch(v6);</span><br><span class="line">          _cxa_end_catch();</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp_4 = *(enc_next_struct_0 *)_cxa_get_exception_ptr(v6);</span><br><span class="line">        _cxa_begin_catch(v51);</span><br><span class="line">        enc_next(temp_4.ourroundkeys, temp_4.ourplaintext, temp_4.ourciphertext);</span><br><span class="line">        _cxa_end_catch();</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_33:</span><br><span class="line">      ++x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j_0 = <span class="number">0</span>; j_0 &lt;= <span class="number">31</span>; ++j_0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( encdata[j_0] != cmp_arr[j_0] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Sorry!Your flag is wrong!!!!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\ncongratulations!!!!your flag is \nSCTF&#123;%s&#125;&quot;</span>, data);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终可以得到这样的一个 main 函数。根据其中的信息，可以得到对 flag 的加密过程由三部分组成。</p><p>首先是第一部分</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/tea.png"></p><p>这部分加密由一堆函数组成，通过对这些函数(其中也有大量的利用异常处理来隐藏代码)的分析，即可还原出函数的操作：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/tea2.png"></p><p>不难看出是魔改的 tea 加密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], v2 = v[<span class="number">2</span>], v3 = v[<span class="number">3</span>], sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, i; </span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x73637466</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        sum1 += delta;</span><br><span class="line">        sum2 += delta;</span><br><span class="line">        v0 = ((v1 &lt;&lt; <span class="number">4</span>) + k2) ^ (v1 + sum1) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum1+i);</span><br><span class="line">        v2 = ((v3 &lt;&lt; <span class="number">4</span>) + k2) ^ (v3 + sum2) ^ ((v3 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum2+i);</span><br><span class="line">        v1 = ((v0 &lt;&lt; <span class="number">4</span>) + k0) ^ (v0 + sum1) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum1+i);</span><br><span class="line">        v3 = ((v2 &lt;&lt; <span class="number">4</span>) + k0) ^ (v2 + sum2) ^ ((v2 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum2+i);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1; v[<span class="number">2</span>] = v2; v[<span class="number">3</span>] = v3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum: %x\n&quot;</span>, sum1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分的加密是一个普通的异或加密：</p><p><img src="/pictures/SCTF-REVERSE-CplusExceptionEncrypt-%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/xor.png"></p><p>第三部分根据其中用到的常数以及代码特征可以得到是魔改的 AES 加密，对轮秘钥生成和第一次<code>AddRoundKey</code>和<code>SubBytes</code>做了修改。</p><p>解密脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;aes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * round constants</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> RC[] = &#123; <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sbox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Inverse Sboxs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> INV_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">    <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">    <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">    <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">    <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://en.wikipedia.org/wiki/Finite_field_arithmetic</span></span><br><span class="line"><span class="comment"> * Multiply two numbers in the GF(2^8) finite field defined</span></span><br><span class="line"><span class="comment"> * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0</span></span><br><span class="line"><span class="comment"> * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)</span></span><br><span class="line"><span class="comment"> * just in order to get a higher speed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">uint8_t</span> <span class="title">mul2</span><span class="params">(<span class="keyword">uint8_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &amp; <span class="number">0x80</span>) ? ((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span>) : (a &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:    ShiftRows</span></span><br><span class="line"><span class="comment"> * @descrption:</span></span><br><span class="line"><span class="comment"> *  Row0: s0  s4  s8  s12   &lt;&lt;&lt; 0 byte</span></span><br><span class="line"><span class="comment"> *  Row1: s1  s5  s9  s13   &lt;&lt;&lt; 1 byte</span></span><br><span class="line"><span class="comment"> *  Row2: s2  s6  s10 s14   &lt;&lt;&lt; 2 bytes</span></span><br><span class="line"><span class="comment"> *  Row3: s3  s7  s11 s15   &lt;&lt;&lt; 3 bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shift_rows</span><span class="params">(<span class="keyword">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> temp;</span><br><span class="line">    <span class="comment">// row1</span></span><br><span class="line">    temp = *(state + <span class="number">1</span>);</span><br><span class="line">    *(state + <span class="number">1</span>) = *(state + <span class="number">5</span>);</span><br><span class="line">    *(state + <span class="number">5</span>) = *(state + <span class="number">9</span>);</span><br><span class="line">    *(state + <span class="number">9</span>) = *(state + <span class="number">13</span>);</span><br><span class="line">    *(state + <span class="number">13</span>) = temp;</span><br><span class="line">    <span class="comment">// row2</span></span><br><span class="line">    temp = *(state + <span class="number">2</span>);</span><br><span class="line">    *(state + <span class="number">2</span>) = *(state + <span class="number">10</span>);</span><br><span class="line">    *(state + <span class="number">10</span>) = temp;</span><br><span class="line">    temp = *(state + <span class="number">6</span>);</span><br><span class="line">    *(state + <span class="number">6</span>) = *(state + <span class="number">14</span>);</span><br><span class="line">    *(state + <span class="number">14</span>) = temp;</span><br><span class="line">    <span class="comment">// row3</span></span><br><span class="line">    temp = *(state + <span class="number">15</span>);</span><br><span class="line">    *(state + <span class="number">15</span>) = *(state + <span class="number">11</span>);</span><br><span class="line">    *(state + <span class="number">11</span>) = *(state + <span class="number">7</span>);</span><br><span class="line">    *(state + <span class="number">7</span>) = *(state + <span class="number">3</span>);</span><br><span class="line">    *(state + <span class="number">3</span>) = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:    Inverse ShiftRows</span></span><br><span class="line"><span class="comment"> * @description</span></span><br><span class="line"><span class="comment"> *  Row0: s0  s4  s8  s12   &gt;&gt;&gt; 0 byte</span></span><br><span class="line"><span class="comment"> *  Row1: s1  s5  s9  s13   &gt;&gt;&gt; 1 byte</span></span><br><span class="line"><span class="comment"> *  Row2: s2  s6  s10 s14   &gt;&gt;&gt; 2 bytes</span></span><br><span class="line"><span class="comment"> *  Row3: s3  s7  s11 s15   &gt;&gt;&gt; 3 bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inv_shift_rows</span><span class="params">(<span class="keyword">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> temp;</span><br><span class="line">    <span class="comment">// row1</span></span><br><span class="line">    temp = *(state + <span class="number">13</span>);</span><br><span class="line">    *(state + <span class="number">13</span>) = *(state + <span class="number">9</span>);</span><br><span class="line">    *(state + <span class="number">9</span>) = *(state + <span class="number">5</span>);</span><br><span class="line">    *(state + <span class="number">5</span>) = *(state + <span class="number">1</span>);</span><br><span class="line">    *(state + <span class="number">1</span>) = temp;</span><br><span class="line">    <span class="comment">// row2</span></span><br><span class="line">    temp = *(state + <span class="number">14</span>);</span><br><span class="line">    *(state + <span class="number">14</span>) = *(state + <span class="number">6</span>);</span><br><span class="line">    *(state + <span class="number">6</span>) = temp;</span><br><span class="line">    temp = *(state + <span class="number">10</span>);</span><br><span class="line">    *(state + <span class="number">10</span>) = *(state + <span class="number">2</span>);</span><br><span class="line">    *(state + <span class="number">2</span>) = temp;</span><br><span class="line">    <span class="comment">// row3</span></span><br><span class="line">    temp = *(state + <span class="number">3</span>);</span><br><span class="line">    *(state + <span class="number">3</span>) = *(state + <span class="number">7</span>);</span><br><span class="line">    *(state + <span class="number">7</span>) = *(state + <span class="number">11</span>);</span><br><span class="line">    *(state + <span class="number">11</span>) = *(state + <span class="number">15</span>);</span><br><span class="line">    *(state + <span class="number">15</span>) = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_key_schedule_128</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* key, <span class="keyword">uint8_t</span>* roundkeys)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> temp[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">uint8_t</span>* last4bytes; <span class="comment">// point to the last 4 bytes of one round</span></span><br><span class="line">    <span class="keyword">uint8_t</span>* lastround;</span><br><span class="line">    <span class="keyword">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *roundkeys++ = *key++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    last4bytes = roundkeys - <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_ROUNDS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// k0-k3 for next round</span></span><br><span class="line">        temp[<span class="number">3</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">0</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">1</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">2</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">0</span>] ^= RC[i];</span><br><span class="line">        lastround = roundkeys - <span class="number">16</span>;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">0</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">1</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">2</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">3</span>] ^ *lastround++;</span><br><span class="line">        <span class="comment">// k4-k7 for next round</span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        <span class="comment">// k8-k11 for next round</span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        <span class="comment">// k12-k15 for next round</span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_encrypt_128</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* roundkeys, <span class="keyword">const</span> <span class="keyword">uint8_t</span>* plaintext, <span class="keyword">uint8_t</span>* ciphertext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> tmp[<span class="number">16</span>], t;</span><br><span class="line">    <span class="keyword">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first AddRoundKey</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(ciphertext + i) = *(plaintext + i) ^ *roundkeys++ ^ <span class="number">0x66</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9 rounds</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; AES_ROUNDS; ++j)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SubBytes</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            *(tmp + i) = INV_SBOX[*(ciphertext + i)];</span><br><span class="line">        &#125;</span><br><span class="line">        inv_shift_rows(tmp);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * MixColumns</span></span><br><span class="line"><span class="comment">         * [02 03 01 01]   [s0  s4  s8  s12]</span></span><br><span class="line"><span class="comment">         * [01 02 03 01] . [s1  s5  s9  s13]</span></span><br><span class="line"><span class="comment">         * [01 01 02 03]   [s2  s6  s10 s14]</span></span><br><span class="line"><span class="comment">         * [03 01 01 02]   [s3  s7  s11 s15]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; i += <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = tmp[i] ^ tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">            ciphertext[i] = mul2(tmp[i] ^ tmp[i + <span class="number">1</span>]) ^ tmp[i] ^ t;</span><br><span class="line">            ciphertext[i + <span class="number">1</span>] = mul2(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]) ^ tmp[i + <span class="number">1</span>] ^ t;</span><br><span class="line">            ciphertext[i + <span class="number">2</span>] = mul2(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]) ^ tmp[i + <span class="number">2</span>] ^ t;</span><br><span class="line">            ciphertext[i + <span class="number">3</span>] = mul2(tmp[i + <span class="number">3</span>] ^ tmp[i]) ^ tmp[i + <span class="number">3</span>] ^ t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AddRoundKey</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            *(ciphertext + i) ^= *roundkeys++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// last round</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(ciphertext + i) = SBOX[*(ciphertext + i)];</span><br><span class="line">    &#125;</span><br><span class="line">    shift_rows(ciphertext);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(ciphertext + i) ^= *roundkeys++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aes_decrypt_128</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* roundkeys, <span class="keyword">const</span> <span class="keyword">uint8_t</span>* ciphertext, <span class="keyword">uint8_t</span>* plaintext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> tmp[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">uint8_t</span> t, u, v;</span><br><span class="line">    <span class="keyword">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">    roundkeys += <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first round</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(plaintext + i) = *(ciphertext + i) ^ *(roundkeys + i);</span><br><span class="line">    &#125;</span><br><span class="line">    roundkeys -= <span class="number">16</span>;</span><br><span class="line">    inv_shift_rows(plaintext);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(plaintext + i) = INV_SBOX[*(plaintext + i)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; AES_ROUNDS; ++j)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Inverse AddRoundKey</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            *(tmp + i) = *(plaintext + i) ^ *(roundkeys + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Inverse MixColumns</span></span><br><span class="line"><span class="comment">         * [0e 0b 0d 09]   [s0  s4  s8  s12]</span></span><br><span class="line"><span class="comment">         * [09 0e 0b 0d] . [s1  s5  s9  s13]</span></span><br><span class="line"><span class="comment">         * [0d 09 0e 0b]   [s2  s6  s10 s14]</span></span><br><span class="line"><span class="comment">         * [0b 0d 09 0e]   [s3  s7  s11 s15]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; i += <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = tmp[i] ^ tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">            plaintext[i] = t ^ tmp[i] ^ mul2(tmp[i] ^ tmp[i + <span class="number">1</span>]);</span><br><span class="line">            plaintext[i + <span class="number">1</span>] = t ^ tmp[i + <span class="number">1</span>] ^ mul2(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]);</span><br><span class="line">            plaintext[i + <span class="number">2</span>] = t ^ tmp[i + <span class="number">2</span>] ^ mul2(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]);</span><br><span class="line">            plaintext[i + <span class="number">3</span>] = t ^ tmp[i + <span class="number">3</span>] ^ mul2(tmp[i + <span class="number">3</span>] ^ tmp[i]);</span><br><span class="line">            u = mul2(mul2(tmp[i] ^ tmp[i + <span class="number">2</span>]));</span><br><span class="line">            v = mul2(mul2(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">3</span>]));</span><br><span class="line">            t = mul2(u ^ v);</span><br><span class="line">            plaintext[i] ^= t ^ u;</span><br><span class="line">            plaintext[i + <span class="number">1</span>] ^= t ^ v;</span><br><span class="line">            plaintext[i + <span class="number">2</span>] ^= t ^ u;</span><br><span class="line">            plaintext[i + <span class="number">3</span>] ^= t ^ v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Inverse ShiftRows</span></span><br><span class="line">        shift_rows(plaintext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Inverse SubBytes</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            *(plaintext + i) = SBOX[*(plaintext + i)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roundkeys -= <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// last AddRoundKey</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(plaintext + i) ^= *(roundkeys + i) ^ <span class="number">0x66</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], v2 = v[<span class="number">2</span>], v3 = v[<span class="number">3</span>], sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x73637466</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum1 += delta;</span><br><span class="line">        sum2 += delta;</span><br><span class="line">        temp = ((v1 &lt;&lt; <span class="number">4</span>) + k2) ^ (v1 + sum1) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum1+i);</span><br><span class="line">        v0 += temp;</span><br><span class="line">        temp = ((v3 &lt;&lt; <span class="number">4</span>) + k2) ^ (v3 + sum2) ^ ((v3 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum2+i);</span><br><span class="line">        v2 += temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        temp = ((v0 &lt;&lt; <span class="number">4</span>) + k0) ^ (v0 + sum1) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum1+i);</span><br><span class="line">        v1 += temp;</span><br><span class="line"></span><br><span class="line">        temp = ((v2 &lt;&lt; <span class="number">4</span>) + k0) ^ (v2 + sum2) ^ ((v2 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum2+i);</span><br><span class="line">        v3 += temp;</span><br><span class="line"></span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1; v[<span class="number">2</span>] = v2; v[<span class="number">3</span>] = v3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum: %x\n&quot;</span>, sum1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], v2 = v[<span class="number">2</span>], v3 = v[<span class="number">3</span>], sum1 = <span class="number">0x6c6e8cc0</span>, sum2 = <span class="number">0x6c6e8cc0</span>;<span class="comment">// 0x6c6e90a0;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x73637466</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 -= ((v2 &lt;&lt; <span class="number">4</span>) + k0) ^ (v2 + sum2) ^ ((v2 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum2+i);</span><br><span class="line"></span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k0) ^ (v0 + sum1) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k1) ^ (sum1+i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        v2 -= ((v3 &lt;&lt; <span class="number">4</span>) + k2) ^ (v3 + sum2) ^ ((v3 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum2+i);</span><br><span class="line"></span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k2) ^ (v1 + sum1) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k3) ^ (sum1+i);</span><br><span class="line"></span><br><span class="line">        sum2 -= delta;</span><br><span class="line">        sum1 -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1; </span><br><span class="line">    v[<span class="number">2</span>] = v2; </span><br><span class="line">    v[<span class="number">3</span>] = v3;</span><br><span class="line">    <span class="comment">// printf(&quot;v:%s&quot;, v);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* dec1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* dec = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* roundKeys = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">    aes_key_schedule_128(<span class="string">&quot;Welcome_to_sctf!&quot;</span>, roundKeys);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> enc1[] = &#123; <span class="number">0xBE</span>, <span class="number">0x1C</span>, <span class="number">0xB3</span>, <span class="number">0xF3</span>, <span class="number">0xA1</span>, <span class="number">0xF4</span>, <span class="number">0xE4</span>, <span class="number">0x63</span>, <span class="number">0x11</span>, <span class="number">0xE1</span>,</span><br><span class="line">                            <span class="number">0x1C</span>, <span class="number">0x6B</span>, <span class="number">0x54</span>, <span class="number">0x0A</span>, <span class="number">0xDF</span>, <span class="number">0x74</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> enc2[] =</span><br><span class="line">    &#123; <span class="number">0xF2</span>, <span class="number">0x93</span>, <span class="number">0x55</span>, <span class="number">0xDA</span>,</span><br><span class="line">     <span class="number">0x48</span>, <span class="number">0xFC</span>, <span class="number">0xA2</span>, <span class="number">0x3C</span>, <span class="number">0x89</span>, <span class="number">0x63</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>, <span class="number">0x8D</span>, <span class="number">0xA4</span>,</span><br><span class="line">     <span class="number">0x6D</span>, <span class="number">0x4E</span> &#125;;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aes_decrypt_128(roundKeys, enc1, dec);</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">0</span>] ^= <span class="number">0x73</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">1</span>] ^= <span class="number">0x63</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">2</span>] ^= <span class="number">0x74</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">3</span>] ^= <span class="number">0x66</span>;</span><br><span class="line"></span><br><span class="line">    tea_decrypt((<span class="keyword">uint32_t</span>*)(dec), <span class="string">&quot;Welcome_to_sctf!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nflag1:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dec[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    aes_decrypt_128(roundKeys, enc2, dec);</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">0</span>] ^= <span class="number">0x73</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">1</span>] ^= <span class="number">0x63</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">2</span>] ^= <span class="number">0x74</span>;</span><br><span class="line">    ((<span class="keyword">uint32_t</span>*)dec)[<span class="number">3</span>] ^= <span class="number">0x66</span>;</span><br><span class="line"></span><br><span class="line">    tea_decrypt((<span class="keyword">uint32_t</span>*)(dec), <span class="string">&quot;Welcome_to_sctf!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nflag2:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dec[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C++异常处理机制的学习，对异常处理代码 patch 使得 IDA 可以分析</summary>
    
    
    
    <category term="赛后复现" scheme="https://4nsw3r.top/categories/%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="C++ 异常处理" scheme="https://4nsw3r.top/tags/C-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>动态反调试技术</title>
    <link href="https://4nsw3r.top/2021/08/06/%E5%8A%A8%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <id>https://4nsw3r.top/2021/08/06/%E5%8A%A8%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</id>
    <published>2021-08-06T07:59:52.476Z</published>
    <updated>2021-08-06T08:01:21.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态反调试技术"><a href="#动态反调试技术" class="headerlink" title="动态反调试技术"></a>动态反调试技术</h1><h2 id="使用-SEH-异常进行动态反调试"><a href="#使用-SEH-异常进行动态反调试" class="headerlink" title="使用 SEH 异常进行动态反调试"></a>使用 SEH 异常进行动态反调试</h2><p>正常运行的进程发生异常时，在 SEH 机制作用下，OS 会接收异常，然后调用进程中注册的 SEH 处理。若进程在调试运行中发生异常，调试器就会接收处理。利用该特性可以判断程序是否处于调试状态，然后根据不同结果执行不同操作。</p><h3 id="常见-SEH-异常："><a href="#常见-SEH-异常：" class="headerlink" title="常见 SEH 异常："></a>常见 SEH 异常：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION    非法访问异常</span><br><span class="line">EXCEPTION_BREAKPOINT          int 3 断点异常</span><br><span class="line">EXCEPTION_ILLEGAL_INSTRUCTION 无法解析指令异常</span><br><span class="line">EXCEPTION_INT_DIVIDE_BY_ZERO  整数除 0 异常</span><br><span class="line">EXCEPTION_SINGLE_STEP         单步工作模式异常</span><br></pre></td></tr></table></figure><h3 id="示例1：利用-SEH-在调试运行时跳转到非法地址处使调试终止："><a href="#示例1：利用-SEH-在调试运行时跳转到非法地址处使调试终止：" class="headerlink" title="示例1：利用 SEH 在调试运行时跳转到非法地址处使调试终止："></a>示例1：利用 SEH 在调试运行时跳转到非法地址处使调试终止：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">;注册SEH</span><br><span class="line">push handler</span><br><span class="line">push DWORD ptr fs : [0]</span><br><span class="line">mov DWORD ptr fs : [0] , esp</span><br><span class="line"></span><br><span class="line">;触发 int 3 断点</span><br><span class="line">int 3</span><br><span class="line"></span><br><span class="line">;若无视异常则跳转到非法地址</span><br><span class="line">mov eax, 0xFFFFFFFF</span><br><span class="line">jmp eax</span><br><span class="line">;若非调试状态则正常运行</span><br><span class="line">handler:</span><br><span class="line">;ss : [esp + 0xc]是 CONTEXT *pContext结构体指针，ds:[eax+0xb8]指向EIP成员，使异常处理返回后跳转到正常代码处</span><br><span class="line">mov eax, dword ptr ss : [esp + 0xc]</span><br><span class="line">    mov ebx, normal_code</span><br><span class="line">    mov dword ptr ds : [eax + 0xb8] , ebx</span><br><span class="line">    xor eax, eax</span><br><span class="line">    retn</span><br><span class="line"></span><br><span class="line">normal_code :</span><br><span class="line">pop dword ptr fs : [0]</span><br><span class="line">    add esp, 4</span><br></pre></td></tr></table></figure><h3 id="示例2：利用-SEH-在调试运行和非调试运行时对-flag-作不同的加密"><a href="#示例2：利用-SEH-在调试运行和非调试运行时对-flag-作不同的加密" class="headerlink" title="示例2：利用 SEH 在调试运行和非调试运行时对 flag 作不同的加密"></a>示例2：利用 SEH 在调试运行和非调试运行时对 flag 作不同的加密</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch[] = &#123; <span class="number">87</span>,<span class="number">93</span>,<span class="number">80</span>,<span class="number">86</span>,<span class="number">74</span>,<span class="number">69</span>,<span class="number">89</span>,<span class="number">88</span>,<span class="number">66</span>,<span class="number">110</span>,<span class="number">88</span>,<span class="number">66</span>,<span class="number">110</span>,<span class="number">72</span>,<span class="number">94</span>,<span class="number">68</span>,<span class="number">67</span>,<span class="number">110</span>,<span class="number">87</span>,<span class="number">93</span>,<span class="number">80</span>,<span class="number">86</span>,<span class="number">76</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%24s&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">__try &#123;</span><br><span class="line">    <span class="keyword">int</span>* a = <span class="literal">NULL</span>;</span><br><span class="line">    *a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(flag); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] ^= <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">__except (EXCEPTION_EXECUTE_HANDLER)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(flag); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] ^= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(flag,ch))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;right&quot;</span>);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="示例3：单步执行异常"><a href="#示例3：单步执行异常" class="headerlink" title="示例3：单步执行异常"></a>示例3：单步执行异常</h3><p>CPU 中的 EFLAGS 寄存器的 TF 标志位(Index 8)为1时，CPU 将进入单步执行模式，每执行一条指令就会触发一次<code>EXCEPTION_SINGLE_STEP</code>异常，同时 TF 变为0。利用该特性可以探测调试器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;由于 EFLAGS 寄存器无法直接修改，只能通过栈修改</span><br><span class="line">pushfd</span><br><span class="line">or DWORD PTR SS:[ESP],100</span><br><span class="line">popfd</span><br><span class="line">nop ;用来触发异常</span><br></pre></td></tr></table></figure><p>或者也有C语言版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;intrin.h&gt;</span></span></span><br><span class="line">__try &#123;</span><br><span class="line"><span class="keyword">int</span> a = __readeflags();</span><br><span class="line">a |= <span class="number">0x100</span>;</span><br><span class="line">__writeeflags(a);</span><br><span class="line">a++;;随便一个指令触发异常</span><br><span class="line">&#125;</span><br><span class="line">__except (GetExceptionCode()==EXCEPTION_SINGLE_STEP?EXCEPTION_EXECUTE_HANDLER:EXCEPTION_CONTINUE_SEARCH) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EXCEPTION_SINGLE_STEP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例4：int-2D-异常"><a href="#示例4：int-2D-异常" class="headerlink" title="示例4：int 2D 异常"></a>示例4：int 2D 异常</h3><p>int 2D 原为内核模式中用来触发断点异常的指令，也可以在用户模式下触发异常，但程序调试运行时不会触发异常，只是忽略。在调试模式下执行 int 2d 指令后，下条指令的第一个字节将被忽略，后一个字节会被识别为新的指令继续执行。并且在调试器（OllyDbg、x32dbg）中，跟踪 int 2d 指令时，不会停在下条指令开始的地方，而是一直运行，直到遇到断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">BOOL bDebugging = FALSE;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        // install SEH</span><br><span class="line">        push handler</span><br><span class="line">        push DWORD ptr fs:[0]</span><br><span class="line">        mov DWORD ptr fs:[0], esp</span><br><span class="line">        </span><br><span class="line">        int 0x2d</span><br><span class="line"></span><br><span class="line">        nop</span><br><span class="line">        mov bDebugging, 1</span><br><span class="line">        jmp normal_code</span><br><span class="line"></span><br><span class="line">handler:</span><br><span class="line">        mov eax, dword ptr ss:[esp+0xc]</span><br><span class="line">        mov dword ptr ds:[eax+0xb8], offset normal_code</span><br><span class="line">        mov bDebugging, 0</span><br><span class="line">        xor eax, eax</span><br><span class="line">        retn</span><br><span class="line"></span><br><span class="line">normal_code:</span><br><span class="line">        //   remove SEH</span><br><span class="line">        pop dword ptr fs:[0]</span><br><span class="line">        add esp, 4</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;Trap Flag (INT 2D)\n&quot;);</span><br><span class="line">    if( bDebugging )  printf(&quot;  =&gt; Debugging!!!\n\n&quot;);</span><br><span class="line">    else              printf(&quot;  =&gt; Not debugging...\n\n&quot;);</span><br></pre></td></tr></table></figure><h2 id="Timing-Check-运行时间反调试"><a href="#Timing-Check-运行时间反调试" class="headerlink" title="Timing Check 运行时间反调试"></a>Timing Check 运行时间反调试</h2><p>在调试器或虚拟机中逐行跟踪代码比程序正常运行耗费的时间多。时间计数器的准确程度从高到低：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RDTSC&gt;NtQueryPerformanceCouner()&gt;GetTickCount()</span><br></pre></td></tr></table></figure><h3 id="RDTSC"><a href="#RDTSC" class="headerlink" title="RDTSC"></a>RDTSC</h3><p>x86或x64 CPU 中存在一个 TSC（TimeStampCounter）的64位寄存器，CPU对每个时钟周期计数，然后保存到 TSC 。 <code>RDTSC</code>是一条汇编指令，将<code>TSC</code>的值高32位读入<code>EDX</code>，低32位读入<code>EAX</code>。在 x64 中，仍然先存入两个寄存器，然后对 rax 作移位并和 rdx 做 or 运算，使最终值存储在 rax 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">RDTSC</span><br><span class="line">push EDX ;记录原值</span><br><span class="line">push EAX</span><br><span class="line">;需要保护的代码</span><br><span class="line">xor eax,eax</span><br><span class="line">mov ecx,0x3e8</span><br><span class="line">loc:inc EAX</span><br><span class="line">loop loc</span><br><span class="line">RDTSC</span><br><span class="line"></span><br><span class="line">pop esi</span><br><span class="line">pop edi</span><br><span class="line">;进行比较，如果两次值之差&gt;0xFFFFFF就return</span><br><span class="line">cmp edx,edi</span><br><span class="line">ja re</span><br><span class="line"></span><br><span class="line">sub eax,esi</span><br><span class="line">mov ss:[ebp-4],eax</span><br><span class="line">cmp eax,0xFFFFFF</span><br><span class="line">ja re</span><br><span class="line">normalcode:</span><br><span class="line">...</span><br><span class="line">re:</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>在 VS2019 和 gcc 里，msvc 将RDTSC指令包装为了函数，使使用变得简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> time=__rdtsc();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> time2 = __rdtsc();</span><br><span class="line"><span class="keyword">if</span> (time2 - time &gt; <span class="number">0xFFFFFF</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="0xCC-断点探测法"><a href="#0xCC-断点探测法" class="headerlink" title="0xCC 断点探测法"></a>0xCC 断点探测法</h2><p>程序在进行调试时会设置软件断点，软件断点对应的<code>x86</code>指令为<code>0xCC</code>。因此，检测该指令即可判断程序是否处于调试状态。但由于代码和数据中也会有<code>0xCC</code>，因此只扫描是否存在<code>0xCC</code>并不可靠。<br><img src="/pictures/0xCC1.jpg"><br><img src="/pictures/0xCC2.jpg"></p><h3 id="探测-API-断点"><a href="#探测-API-断点" class="headerlink" title="探测 API 断点"></a>探测 API 断点</h3><p>一般想调试程序的局部功能时，会在 API 最开始处设置断点，然后查看栈中的数据，于是就可以探测 API 头部的<code>0XCC</code>。或者探测自己的重要函数头部等关键点的<code>0xCC</code>。</p><h3 id="比较校验和"><a href="#比较校验和" class="headerlink" title="比较校验和"></a>比较校验和</h3><p>由于<code>0xCC</code>的存在，在存在<code>0xCC</code>的区域的校验和值会和原值不同。校验和的计算有多种方式，实际应用可以使用<code>CRC32</code>算法。</p>]]></content>
    
    
    <summary type="html">几个常见的动态反调试技术</summary>
    
    
    
    <category term="《逆向工程核心原理》笔记" scheme="https://4nsw3r.top/categories/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="反调试" scheme="https://4nsw3r.top/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>对 SEH 的浅显认识</title>
    <link href="https://4nsw3r.top/2021/08/04/%E5%AF%B9%20SEH%20%E7%9A%84%E6%B5%85%E6%98%BE%E8%AE%A4%E8%AF%86/"/>
    <id>https://4nsw3r.top/2021/08/04/%E5%AF%B9%20SEH%20%E7%9A%84%E6%B5%85%E6%98%BE%E8%AE%A4%E8%AF%86/</id>
    <published>2021-08-04T15:45:36.386Z</published>
    <updated>2021-08-06T06:01:04.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对-SEH-的浅显认识"><a href="#对-SEH-的浅显认识" class="headerlink" title="对 SEH 的浅显认识"></a>对 SEH 的浅显认识</h1><p>SEH 是 Windows 操作系统提供的异常处理机制。</p><h2 id="使用-try-关键字注册-SEH"><a href="#使用-try-关键字注册-SEH" class="headerlink" title="使用 __try 关键字注册 SEH"></a>使用 __try 关键字注册 SEH</h2><p>使用 __try 关键字可以创建 SEH：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FilterFunc</span><span class="params">(DWORD dwExceptionCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dwExceptionCode == EXCEPTION_ACCESS_VIOLATION)<span class="comment">//非法访问异常</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SEH catch\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __try &#123;</span><br><span class="line">        <span class="keyword">int</span> *a=<span class="literal">NULL</span>;</span><br><span class="line">        *a=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    __except (FilterFunc(GetExceptionCode()))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SEH final\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段代码在 32 位和 64 位上均有效，不过在汇编层面的具体实现方式不同。</p><p>其中<code>__try</code>关键字和<code>__except</code>关键字共同完成异常处理，<code>__try</code>关键字用来捕获异常，<code>__except</code>关键字根据后面表达式的值来确定当前的异常处理模块是否可以处理该种异常。括号内表达式值有三种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://docs.microsoft.com/en-us/cpp/cpp/try-except-statement?view=msvc-160</span></span><br><span class="line">EXCEPTION_CONTINUE_EXECUTION (–<span class="number">1</span>)          <span class="comment">//异常被忽略，控制流将在异常出现的点之后，继续恢复运行。</span></span><br><span class="line">EXCEPTION_CONTINUE_SEARCH (<span class="number">0</span>)              <span class="comment">//异常不被识别，也即当前的这个__except模块不是这个异常错误所对应的正确的异常处理模块。</span></span><br><span class="line">EXCEPTION_EXECUTE_HANDLER (<span class="number">1</span>)              <span class="comment">//异常已经被识别，控制流将进入到__except模块中运行异常处理代码</span></span><br></pre></td></tr></table></figure><p>而<code>FilterFunc</code>函数参数中的<code>GetExceptionCode</code>函数作用是获取异常代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//minwinbase.h</span></span><br><span class="line"><span class="comment">/* compatibility macros */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_ACCESS_VIOLATION          STATUS_ACCESS_VIOLATION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_DATATYPE_MISALIGNMENT     STATUS_DATATYPE_MISALIGNMENT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_BREAKPOINT                STATUS_BREAKPOINT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_SINGLE_STEP               STATUS_SINGLE_STEP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_ARRAY_BOUNDS_EXCEEDED     STATUS_ARRAY_BOUNDS_EXCEEDED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_DENORMAL_OPERAND      STATUS_FLOAT_DENORMAL_OPERAND</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_DIVIDE_BY_ZERO        STATUS_FLOAT_DIVIDE_BY_ZERO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_INEXACT_RESULT        STATUS_FLOAT_INEXACT_RESULT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_INVALID_OPERATION     STATUS_FLOAT_INVALID_OPERATION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_OVERFLOW              STATUS_FLOAT_OVERFLOW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_STACK_CHECK           STATUS_FLOAT_STACK_CHECK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_FLT_UNDERFLOW             STATUS_FLOAT_UNDERFLOW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_INT_DIVIDE_BY_ZERO        STATUS_INTEGER_DIVIDE_BY_ZERO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_INT_OVERFLOW              STATUS_INTEGER_OVERFLOW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_PRIV_INSTRUCTION          STATUS_PRIVILEGED_INSTRUCTION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_IN_PAGE_ERROR             STATUS_IN_PAGE_ERROR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_ILLEGAL_INSTRUCTION       STATUS_ILLEGAL_INSTRUCTION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_NONCONTINUABLE_EXCEPTION  STATUS_NONCONTINUABLE_EXCEPTION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_STACK_OVERFLOW            STATUS_STACK_OVERFLOW</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_INVALID_DISPOSITION       STATUS_INVALID_DISPOSITION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_GUARD_PAGE                STATUS_GUARD_PAGE_VIOLATION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_INVALID_HANDLE            STATUS_INVALID_HANDLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXCEPTION_POSSIBLE_DEADLOCK         STATUS_POSSIBLE_DEADLOCK</span></span><br><span class="line"><span class="comment">//确切的常数定义在winnt.h</span></span><br></pre></td></tr></table></figure><p>其中常用的如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION    非法访问异常</span><br><span class="line">EXCEPTION_BREAKPOINT          int 3 断点异常</span><br><span class="line">EXCEPTION_ILLEGAL_INSTRUCTION 无法解析指令异常</span><br><span class="line">EXCEPTION_INT_DIVIDE_BY_ZERO  整数除 0 异常</span><br><span class="line">EXCEPTION_SINGLE_STEP         单步工作模式异常</span><br></pre></td></tr></table></figure><p>除<code>GetExceptionCode</code>外，还有一个函数<code>GetExceptionInformation</code>用于获取异常的详细信息。</p><p>另外，还有<code>__try-__finally</code>语句,<code>finally</code>没有表达式，即异常直接被<code>finally</code>中的语句处理(或直接跳过)。</p><h2 id="在32位汇编中注册-SEH-异常处理函数"><a href="#在32位汇编中注册-SEH-异常处理函数" class="headerlink" title="在32位汇编中注册 SEH 异常处理函数"></a>在32位汇编中注册 SEH 异常处理函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push SEHfunction</span><br><span class="line">push DWORD PTR FS:[0]</span><br><span class="line">mov DWORD PTR FS:[0],esp</span><br></pre></td></tr></table></figure><p>该段代码仅适用于 32 位，64 位中 SEH 由编译器直接注册</p><h2 id="对反汇编的-SEH-进行分析"><a href="#对反汇编的-SEH-进行分析" class="headerlink" title="对反汇编的 SEH 进行分析"></a>对反汇编的 SEH 进行分析</h2><p>对32位来说很简单，查看上面汇编代码的特征即可：<br>该段代码由上面的示例代码在 vs2019 中生成<br><img src="/pictures/32%E4%BD%8DSEH.jpg" alt="32位SEH"><br>而对64位来说，由于 SEH 不在函数中动态注册，分析起来有一定难度。<br>对于64位 PE 文件，编译器在其头部嵌入了几乎所有（一小部分特殊函数没有）函数的 SEH 信息。每个函数是否使用了SEH，使用的是什么 SEH（__except还是__finally)等，就在 PE 的<code>Exception Directory</code>里。所以我们如果要找64位函数所使用的 SEH 的话，需要先取得该函数的相对偏移地址（RVA），然后到该目录下找，示例还是上文的代码，所用工具为<code>CFF Explorer</code>,异常就在<code>main</code>函数内触发，<code>main</code>的偏移为<code>0x11900</code>。可以看到这里出现的<code>BeginAddress</code>为异常的<code>__try</code>块起始位置，<code>EndAddress</code>为<code>__try</code>的结束位置，而<code>HandlerAddress</code>是调用<code>FilterFunc</code>函数的代码，<code>JumpTarget</code>是<code>__except</code>的代码。<br><img src="/pictures/64%E4%BD%8DPE.jpg" alt="32位SEH"><br><img src="/pictures/main.jpg" alt="32位SEH"><br><img src="/pictures/callexcept.jpg" alt="32位SEH"><br>（详细信息可参考这位大牛的<a href="https://cloud.tencent.com/developer/article/1471316">SEH分析笔记（X64篇） - 云+社区 - 腾讯云</a>）。</p>]]></content>
    
    
    <summary type="html">简单 SEH 理解</summary>
    
    
    
    <category term="《逆向工程核心原理》笔记" scheme="https://4nsw3r.top/categories/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="SEH" scheme="https://4nsw3r.top/tags/SEH/"/>
    
  </entry>
  
  <entry>
    <title>静态反调试技术</title>
    <link href="https://4nsw3r.top/2021/08/03/%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <id>https://4nsw3r.top/2021/08/03/%E9%9D%99%E6%80%81%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</id>
    <published>2021-08-03T11:33:06.160Z</published>
    <updated>2021-08-03T12:16:01.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态反调试技术"><a href="#静态反调试技术" class="headerlink" title="静态反调试技术"></a>静态反调试技术</h1><h2 id="PEB-进程环境块-反调"><a href="#PEB-进程环境块-反调" class="headerlink" title="PEB (进程环境块)反调"></a>PEB (进程环境块)反调</h2><h3 id="PEB-的概念"><a href="#PEB-的概念" class="headerlink" title="PEB 的概念"></a>PEB 的概念</h3><p>PEB(Process Environment Block)是存放进程信息的结构体，与之概念类似的是 TEB(Thread Environment Block)，即线程环境块，PEB 的指针 是 TEB 结构体的成员，因此想要访问 PEB ，就可以通过系统 API <code>Ntdll.NtCurrentTeb()</code>访问 TEB 再加上 0x30 得到。而在汇编层面中，FS 段寄存器用来指示当前线程的 TEB ，<code>FS:[0x30]</code>就是 PEB 的地址，<code>FS:[0x18]</code> 就是 TEB 的地址。<br>注意：PEB 在各个版本的系统中不太一样，因此使用库函数即可准确获取到自己想要的信息，是最稳妥的办法。<a href="#win10-PEB">win10 PEB</a> 附在文后。</p><h3 id="PEB-中比较重要的成员"><a href="#PEB-中比较重要的成员" class="headerlink" title="PEB 中比较重要的成员"></a>PEB 中比较重要的成员</h3><h4 id="002-BeingDebugged-XP、win7、win10-都适用"><a href="#002-BeingDebugged-XP、win7、win10-都适用" class="headerlink" title="+002 BeingDebugged(XP、win7、win10 都适用)"></a>+002 BeingDebugged(XP、win7、win10 都适用)</h4><p>该成员用于判断当前进程是否处于调试状态。<br><code>BeingDebugged</code>可由<code>Kernelbase.dll</code>中的<code>IsDebuggerPresent()</code>API 来得到，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(IsDebuggerPresent())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：在使用调试器附加到进程时，该值也会生效。</strong></p><h4 id="0xC-Ldr"><a href="#0xC-Ldr" class="headerlink" title="+0xC Ldr"></a>+0xC Ldr</h4><p><strong>注意：Ldr 的反调试仅适用于 XP 系统。</strong><br>在调试时，堆内存区域会出现一些特殊的标识，未使用的堆内存区域填充为<code>0xEEFEEEFE</code>，而Ldr指向 _PEB_LDR_DATA 结构体，该结构体是在堆内存中创建的。</p><h4 id="0x18-ProcessHeap"><a href="#0x18-ProcessHeap" class="headerlink" title="+0x18 ProcessHeap"></a>+0x18 ProcessHeap</h4><p><strong>注意：ProcessHeap 的反调试仅适用于 XP 系统。</strong><br>该成员是指向 HEAP 结构体的指针，而 HEAP 结构体中的 Flags(+0xC)和 ForceFlags(+0x10)成员在正常运行时为 2和 0 。ProcessHeap 可由<code>GetProcessHeap()</code>API 得到。</p><h4 id="0x68-NtGlobalFlag-XP、win7、win10都适用"><a href="#0x68-NtGlobalFlag-XP、win7、win10都适用" class="headerlink" title="+0x68 NtGlobalFlag(XP、win7、win10都适用)"></a>+0x68 NtGlobalFlag(XP、win7、win10都适用)</h4><p>调试时，NtGlobalFlag 的值为 0x70 。</p><p><strong>注意：使用调试器附加时，该值不变</strong></p><h2 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess()"></a>NtQueryInformationProcess()</h2><p>函数定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__kernel_entry NTSTATUS <span class="title">NtQueryInformationProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE           ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">    PROCESSINFOCLASS ProcessInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    PVOID            ProcessInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG            ProcessInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">    PULONG           ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>ProcessHandle</code>为进程句柄，第3个参数根据第二个 enum 的值来传出不同值，第二个参数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">PROCESSINFOCLASS</span>&#123;</span></span><br><span class="line">    ProcessBasicInformation = <span class="number">1</span>, </span><br><span class="line">    ProcessQuotaLimits, </span><br><span class="line">    ProcessIoCounters, </span><br><span class="line">    ProcessVmCounters ProcessTimes, </span><br><span class="line">    ProcessBasePriority, </span><br><span class="line">    ProcessRaisePriority, </span><br><span class="line">    ProcessDebugPort = <span class="number">7</span>, </span><br><span class="line">    ProcessExceptionPort, </span><br><span class="line">    ProcessAccessToken, </span><br><span class="line">    ProcessLdtInformation, </span><br><span class="line">    ProcessLdtSize, </span><br><span class="line">    ProcessDefaultHardErrorMode, </span><br><span class="line">    ProcessIoPortHandlers, </span><br><span class="line">    ProcessPooledUsageAndLimits, </span><br><span class="line">    ProcessWorkingSetWatch, </span><br><span class="line">    ProcessUserModeIOPL, </span><br><span class="line">    rocessEnableAlignmentFaultFixup, </span><br><span class="line">    ProcessPriorityClass, </span><br><span class="line">    ProcessWx86Information, </span><br><span class="line">    ProcessHandleCount, </span><br><span class="line">    ProcessAffinityMask, </span><br><span class="line">    ProcessPriorityBoost, </span><br><span class="line">    ProcessDeviceMap, </span><br><span class="line">    ProcessSessionInformation, </span><br><span class="line">    ProcessForegroundInformation, </span><br><span class="line">    ProcessWow64Information = <span class="number">26</span>, </span><br><span class="line">    ProcessImageFileName = <span class="number">27</span>, </span><br><span class="line">    ProcessLUIDDeviceMapsEnabled, </span><br><span class="line">    ProcessBreakOnTermination, </span><br><span class="line">    ProcessDebugObjectHandle = <span class="number">30</span>, </span><br><span class="line">    ProcessDebugFlags = <span class="number">31</span>, </span><br><span class="line">    ProcessHandleTracing, </span><br><span class="line">    ProcessUnknown33, </span><br><span class="line">    ProcessUnknown34, </span><br><span class="line">    ProcessUnknown35, </span><br><span class="line">    ProcessCookie, </span><br><span class="line">    MaxProcessInfoClass </span><br><span class="line">&#125; PROCESSINFOCLASS;</span><br></pre></td></tr></table></figure><p>该函数虽然存在于<code>winternl.h</code>中，但直接从头文件引入却会有链接错误，需要加载<code>ntdll.dll</code>来使用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(NTAPI* pfnNtQueryInformationProcess)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_      HANDLE           ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_      UINT             ProcessInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">_Out_     PVOID            ProcessInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_      ULONG            ProcessInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">_Out_opt_ PULONG           ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">HMODULE hNtDll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">pfnNtQueryInformationProcess NtQueryInformationProcess=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (hNtDll)</span><br><span class="line">&#123;</span><br><span class="line">    NtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, <span class="string">&quot;NtQueryInformationProcess&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessDebugPort-0x7"><a href="#ProcessDebugPort-0x7" class="headerlink" title="ProcessDebugPort (0x7)"></a>ProcessDebugPort (0x7)</h3><h4 id="使用原函数"><a href="#使用原函数" class="headerlink" title="使用原函数"></a>使用原函数</h4><p>进程处于调试状态时，系统会分配一个调试端口。当 enum 的值为 0x7 时，使用该函数就能在第三个参数处获取调试端口，若进程处于非调试状态，则传出的值为 0 ，处于调试状态则传出<code>0xFFFFFFFF</code>。示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Port;</span><br><span class="line">NtQueryInformationProcess(GetCurrentProcess(),ProcessDebugPort,&amp;Port,<span class="keyword">sizeof</span>(Port),<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(Port)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="使用-CheckRemoteDebuggerPresent"><a href="#使用-CheckRemoteDebuggerPresent" class="headerlink" title="使用 CheckRemoteDebuggerPresent()"></a>使用 CheckRemoteDebuggerPresent()</h4><p>该函数与<code>IsDebuggerPresent()</code>类似，但其不仅可以检测当前进程，还可用于检测其他进程是否处于调试状态。</p><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CheckRemoteDebuggerPresent</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    PBOOL  pbDebuggerPresent</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> status;</span><br><span class="line">CheckRemoteDebuggerPresent(GetcurrentProcess(),&amp;status);</span><br><span class="line"><span class="keyword">if</span>(status)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>实际上在该函数内部仍然使用了NtQueryInformationProcess() 函数：<img src="/pictures/call%20NtQueryInformationProcess.jpg" alt="使用原函数"></p><h3 id="ProcessDebugObjectHandle-0x1E"><a href="#ProcessDebugObjectHandle-0x1E" class="headerlink" title="ProcessDebugObjectHandle(0x1E)"></a>ProcessDebugObjectHandle(0x1E)</h3><p>调试进程时会生成调试对象，函数的第二个参数值为 ProcessDebugObjectHandle(0x1E) 时，传出的第三个参数为调试对象句柄。非调试状态时传出NULL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> handle;</span><br><span class="line">NtQueryInformationProcess(GetCurrentProcess(),ProcessDebugObjectHandle,&amp;handle,<span class="keyword">sizeof</span>(handle),<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(!handle)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="ProcessDebugFlags-0x1F"><a href="#ProcessDebugFlags-0x1F" class="headerlink" title="ProcessDebugFlags(0x1F)"></a>ProcessDebugFlags(0x1F)</h3><p>第二个参数值为 ProcessDebugFlags(0x1F) 时，第三个参数传出调试标志的值。若为 0 则被调试，若为 1 则非调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">NtQueryInformationProcess(GetCurrentProcess(),ProcessDebugFlags,&amp;flag,<span class="keyword">sizeof</span>(flag),<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="NtQuerySystemInformation-检测OS"><a href="#NtQuerySystemInformation-检测OS" class="headerlink" title="NtQuerySystemInformation() 检测OS"></a>NtQuerySystemInformation() 检测OS</h2><p>该函数用来获取当前运行的多种 OS 信息，以此来判断有无调试环境，间接判断程序是否为调试状态。</p><p>函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntquerysysteminformation</span></span><br><span class="line"><span class="function">__kernel_entry NTSTATUS <span class="title">NtQuerySystemInformation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    PVOID                    SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG                    SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">    PULONG                   ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>参数解释： SystemInformationClass 中指定需要的系统信息类型，将信息结构体的地址传递给 SystemInformation 参数。</p><p>SYSTEM_INFORMATION_CLASS 类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//winternl.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">SYSTEM_INFORMATION_CLASS</span> &#123;</span></span><br><span class="line">    SystemBasicInformation = <span class="number">0</span>,</span><br><span class="line">    SystemPerformanceInformation = <span class="number">2</span>,</span><br><span class="line">    SystemTimeOfDayInformation = <span class="number">3</span>,</span><br><span class="line">    SystemProcessInformation = <span class="number">5</span>,</span><br><span class="line">    SystemProcessorPerformanceInformation = <span class="number">8</span>,</span><br><span class="line">    SystemInterruptInformation = <span class="number">23</span>,</span><br><span class="line">    SystemExceptionInformation = <span class="number">33</span>,</span><br><span class="line">    SystemKernelDebuggerInformation = <span class="number">35</span>,</span><br><span class="line">    SystemRegistryQuotaInformation = <span class="number">37</span>,</span><br><span class="line">    SystemLookasideInformation = <span class="number">45</span>,</span><br><span class="line">    SystemCodeIntegrityInformation = <span class="number">103</span>,</span><br><span class="line">    SystemPolicyInformation = <span class="number">134</span>,</span><br><span class="line">&#125; SYSTEM_INFORMATION_CLASS;</span><br></pre></td></tr></table></figure><p>该函数定义存在于 winternl.h 但直接使用会出现链接错误，因此需加载 ntdll.dll 使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI* pfnNtQuerySystemInformation)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    PVOID                    SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">    ULONG                    SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">    PULONG                   ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">HMODULE hNtDll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">pfnNtQuerySystemInformation NtQuerySystemInformation=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (hNtDll)</span><br><span class="line">&#123;</span><br><span class="line">    NtQuerySystemInformation = (pfnNtQuerySystemInformation)GetProcAddress(hNtDll, <span class="string">&quot;NtQuerySystemInformation&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SystemKernelDebuggerInformation-0x23-检测-OS-是否处于调试模式"><a href="#SystemKernelDebuggerInformation-0x23-检测-OS-是否处于调试模式" class="headerlink" title="SystemKernelDebuggerInformation(0x23) 检测 OS 是否处于调试模式"></a>SystemKernelDebuggerInformation(0x23) 检测 OS 是否处于调试模式</h3><p>使用以上方法引入 NtQuerySystemInformation 函数后，即可使用该函数完成功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DebuggerInformation</span> &#123;</span></span><br><span class="line">    BOOLEAN DebuggerEnabled;</span><br><span class="line">    BOOLEAN DebuggerNotPresent;</span><br><span class="line">&#125;DebuggerInformation;</span><br><span class="line">DebuggerInformation info;</span><br><span class="line">NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)<span class="number">0x23</span>,&amp;info,<span class="keyword">sizeof</span>(info),<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(info.DebuggerEnabled)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="ZwSetInformationThread-强制分离被调试者与调试器"><a href="#ZwSetInformationThread-强制分离被调试者与调试器" class="headerlink" title="ZwSetInformationThread()  强制分离被调试者与调试器"></a>ZwSetInformationThread()  强制分离被调试者与调试器</h2><p>该函数可强制分离被调试者与调试器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ZW_SET_INFORMATION_THREAD)</span> <span class="params">(HANDLE, DWORD, PVOID, ULONG)</span></span>;</span><br><span class="line">HMODULE hNtDll = LoadLibraryA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line">ZW_SET_INFORMATION_THREAD ZSsetInformationThread = (ZW_SET_INFORMATION_THREAD)GetProcAddress(hNtDll, <span class="string">&quot;ZwSetInformationThread&quot;</span>);</span><br><span class="line">ZwSetInformationThread(GetCurrentThread(),<span class="number">0x11</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="进程检测，窗口检测等"><a href="#进程检测，窗口检测等" class="headerlink" title="进程检测，窗口检测等"></a>进程检测，窗口检测等</h2><p>检测窗口：FindWindow()</p><p>检测进程：CreateToolhelp32Snapshot()</p><p>获取计算机名称：GetComputerName()</p><p>检查程序运行路径：GetCommandLine()</p><p>检查是否有虚拟机运行：检查特定进程：VMWareService.exe</p><h2 id="win10-PEB"><a href="#win10-PEB" class="headerlink" title="win10 PEB"></a>win10 PEB</h2><h3 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dt _PEB in windbg</span></span><br><span class="line">+<span class="number">0x000</span> InheritedAddressSpace : UChar</span><br><span class="line">+<span class="number">0x001</span> ReadImageFileExecOptions : UChar</span><br><span class="line">+<span class="number">0x002</span> BeingDebugged    : UChar</span><br><span class="line">+<span class="number">0x003</span> BitField         : UChar</span><br><span class="line">+<span class="number">0x003</span> ImageUsesLargePages : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsProtectedProcess : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsImageDynamicallyRelocated : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> SkipPatchingUser32Forwarders : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsPackagedProcess : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsAppContainer   : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsProtectedProcessLight : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsLongPathAwareProcess : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x004</span> Mutant           : Ptr32 Void</span><br><span class="line">+<span class="number">0x008</span> ImageBaseAddress : Ptr32 Void</span><br><span class="line">+<span class="number">0x00c</span> Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class="line">+<span class="number">0x010</span> ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS</span><br><span class="line">+<span class="number">0x014</span> SubSystemData    : Ptr32 Void</span><br><span class="line">+<span class="number">0x018</span> ProcessHeap      : Ptr32 Void</span><br><span class="line">+<span class="number">0x01c</span> FastPebLock      : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class="line">+<span class="number">0x020</span> AtlThunkSListPtr : Ptr32 _SLIST_HEADER</span><br><span class="line">+<span class="number">0x024</span> IFEOKey          : Ptr32 Void</span><br><span class="line">+<span class="number">0x028</span> CrossProcessFlags : Uint4B</span><br><span class="line">+<span class="number">0x028</span> ProcessInJob     : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessInitializing : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessUsingVEH  : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessUsingVCH  : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessUsingFTH  : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessPreviouslyThrottled : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessCurrentlyThrottled : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ProcessImagesHotPatched : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x028</span> ReservedBits0    : Pos <span class="number">8</span>, <span class="number">24</span> Bits</span><br><span class="line">+<span class="number">0x02c</span> KernelCallbackTable : Ptr32 Void</span><br><span class="line">+<span class="number">0x02c</span> UserSharedInfoPtr : Ptr32 Void</span><br><span class="line">+<span class="number">0x030</span> SystemReserved   : Uint4B</span><br><span class="line">+<span class="number">0x034</span> AtlThunkSListPtr32 : Ptr32 _SLIST_HEADER</span><br><span class="line">+<span class="number">0x038</span> ApiSetMap        : Ptr32 Void</span><br><span class="line">+<span class="number">0x03c</span> TlsExpansionCounter : Uint4B</span><br><span class="line">+<span class="number">0x040</span> TlsBitmap        : Ptr32 Void</span><br><span class="line">+<span class="number">0x044</span> TlsBitmapBits    : [<span class="number">2</span>] Uint4B</span><br><span class="line">+<span class="number">0x04c</span> ReadOnlySharedMemoryBase : Ptr32 Void</span><br><span class="line">+<span class="number">0x050</span> SharedData       : Ptr32 Void</span><br><span class="line">+<span class="number">0x054</span> ReadOnlyStaticServerData : Ptr32 Ptr32 Void</span><br><span class="line">+<span class="number">0x058</span> AnsiCodePageData : Ptr32 Void</span><br><span class="line">+<span class="number">0x05c</span> OemCodePageData  : Ptr32 Void</span><br><span class="line">+<span class="number">0x060</span> UnicodeCaseTableData : Ptr32 Void</span><br><span class="line">+<span class="number">0x064</span> NumberOfProcessors : Uint4B</span><br><span class="line">+<span class="number">0x068</span> NtGlobalFlag     : Uint4B</span><br><span class="line">+<span class="number">0x070</span> CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class="line">+<span class="number">0x078</span> HeapSegmentReserve : Uint4B</span><br><span class="line">+<span class="number">0x07c</span> HeapSegmentCommit : Uint4B</span><br><span class="line">+<span class="number">0x080</span> HeapDeCommitTotalFreeThreshold : Uint4B</span><br><span class="line">+<span class="number">0x084</span> HeapDeCommitFreeBlockThreshold : Uint4B</span><br><span class="line">+<span class="number">0x088</span> NumberOfHeaps    : Uint4B</span><br><span class="line">+<span class="number">0x08c</span> MaximumNumberOfHeaps : Uint4B</span><br><span class="line">+<span class="number">0x090</span> ProcessHeaps     : Ptr32 Ptr32 Void</span><br><span class="line">+<span class="number">0x094</span> GdiSharedHandleTable : Ptr32 Void</span><br><span class="line">+<span class="number">0x098</span> ProcessStarterHelper : Ptr32 Void</span><br><span class="line">+<span class="number">0x09c</span> GdiDCAttributeList : Uint4B</span><br><span class="line">+<span class="number">0x0a0</span> LoaderLock       : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class="line">+<span class="number">0x0a4</span> OSMajorVersion   : Uint4B</span><br><span class="line">+<span class="number">0x0a8</span> OSMinorVersion   : Uint4B</span><br><span class="line">+<span class="number">0x0ac</span> OSBuildNumber    : Uint2B</span><br><span class="line">+<span class="number">0x0ae</span> OSCSDVersion     : Uint2B</span><br><span class="line">+<span class="number">0x0b0</span> OSPlatformId     : Uint4B</span><br><span class="line">+<span class="number">0x0b4</span> ImageSubsystem   : Uint4B</span><br><span class="line">+<span class="number">0x0b8</span> ImageSubsystemMajorVersion : Uint4B</span><br><span class="line">+<span class="number">0x0bc</span> ImageSubsystemMinorVersion : Uint4B</span><br><span class="line">+<span class="number">0x0c0</span> ActiveProcessAffinityMask : Uint4B</span><br><span class="line">+<span class="number">0x0c4</span> GdiHandleBuffer  : [<span class="number">34</span>] Uint4B</span><br><span class="line">+<span class="number">0x14c</span> PostProcessInitRoutine : Ptr32     <span class="keyword">void</span> </span><br><span class="line">+<span class="number">0x150</span> TlsExpansionBitmap : Ptr32 Void</span><br><span class="line">+<span class="number">0x154</span> TlsExpansionBitmapBits : [<span class="number">32</span>] Uint4B</span><br><span class="line">+<span class="number">0x1d4</span> SessionId        : Uint4B</span><br><span class="line">+<span class="number">0x1d8</span> AppCompatFlags   : _ULARGE_INTEGER</span><br><span class="line">+<span class="number">0x1e0</span> AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class="line">+<span class="number">0x1e8</span> pShimData        : Ptr32 Void</span><br><span class="line">+<span class="number">0x1ec</span> AppCompatInfo    : Ptr32 Void</span><br><span class="line">+<span class="number">0x1f0</span> CSDVersion       : _UNICODE_STRING</span><br><span class="line">+<span class="number">0x1f8</span> ActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class="line">+<span class="number">0x1fc</span> ProcessAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class="line">+<span class="number">0x200</span> SystemDefaultActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class="line">+<span class="number">0x204</span> SystemAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class="line">+<span class="number">0x208</span> MinimumStackCommit : Uint4B</span><br><span class="line">+<span class="number">0x20c</span> SparePointers    : [<span class="number">4</span>] Ptr32 Void</span><br><span class="line">+<span class="number">0x21c</span> SpareUlongs      : [<span class="number">5</span>] Uint4B</span><br><span class="line">+<span class="number">0x230</span> WerRegistrationData : Ptr32 Void</span><br><span class="line">+<span class="number">0x234</span> WerShipAssertPtr : Ptr32 Void</span><br><span class="line">+<span class="number">0x238</span> pUnused          : Ptr32 Void</span><br><span class="line">+<span class="number">0x23c</span> pImageHeaderHash : Ptr32 Void</span><br><span class="line">+<span class="number">0x240</span> TracingFlags     : Uint4B</span><br><span class="line">+<span class="number">0x240</span> HeapTracingEnabled : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x240</span> CritSecTracingEnabled : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x240</span> LibLoaderTracingEnabled : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x240</span> SpareTracingBits : Pos <span class="number">3</span>, <span class="number">29</span> Bits</span><br><span class="line">+<span class="number">0x248</span> CsrServerReadOnlySharedMemoryBase : Uint8B</span><br><span class="line">+<span class="number">0x250</span> TppWorkerpListLock : Uint4B</span><br><span class="line">+<span class="number">0x254</span> TppWorkerpList   : _LIST_ENTRY</span><br><span class="line">+<span class="number">0x25c</span> WaitOnAddressHashTable : [<span class="number">128</span>] Ptr32 Void</span><br><span class="line">+<span class="number">0x45c</span> TelemetryCoverageHeader : Ptr32 Void</span><br><span class="line">+<span class="number">0x460</span> CloudFileFlags   : Uint4B</span><br><span class="line">+<span class="number">0x464</span> CloudFileDiagFlags : Uint4B</span><br><span class="line">+<span class="number">0x468</span> PlaceholderCompatibilityMode : Char</span><br><span class="line">+<span class="number">0x469</span> PlaceholderCompatibilityModeReserved : [<span class="number">7</span>] Char</span><br><span class="line">+<span class="number">0x470</span> LeapSecondData   : Ptr32 _LEAP_SECOND_DATA</span><br><span class="line">+<span class="number">0x474</span> LeapSecondFlags  : Uint4B</span><br><span class="line">+<span class="number">0x474</span> SixtySecondEnabled : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x474</span> Reserved         : Pos <span class="number">1</span>, <span class="number">31</span> Bits</span><br><span class="line">+<span class="number">0x478</span> NtGlobalFlag2    : Uint4B</span><br></pre></td></tr></table></figure><h3 id="64位："><a href="#64位：" class="headerlink" title="64位："></a>64位：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0x000</span> InheritedAddressSpace : UChar</span><br><span class="line">+<span class="number">0x001</span> ReadImageFileExecOptions : UChar</span><br><span class="line">+<span class="number">0x002</span> BeingDebugged    : UChar</span><br><span class="line">+<span class="number">0x003</span> BitField         : UChar</span><br><span class="line">+<span class="number">0x003</span> ImageUsesLargePages : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsProtectedProcess : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsImageDynamicallyRelocated : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> SkipPatchingUser32Forwarders : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsPackagedProcess : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsAppContainer   : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsProtectedProcessLight : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x003</span> IsLongPathAwareProcess : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x004</span> Padding0         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x008</span> Mutant           : Ptr64 Void</span><br><span class="line">+<span class="number">0x010</span> ImageBaseAddress : Ptr64 Void</span><br><span class="line">+<span class="number">0x018</span> Ldr              : Ptr64 _PEB_LDR_DATA</span><br><span class="line">+<span class="number">0x020</span> ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS</span><br><span class="line">+<span class="number">0x028</span> SubSystemData    : Ptr64 Void</span><br><span class="line">+<span class="number">0x030</span> ProcessHeap      : Ptr64 Void</span><br><span class="line">+<span class="number">0x038</span> FastPebLock      : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class="line">+<span class="number">0x040</span> AtlThunkSListPtr : Ptr64 _SLIST_HEADER</span><br><span class="line">+<span class="number">0x048</span> IFEOKey          : Ptr64 Void</span><br><span class="line">+<span class="number">0x050</span> CrossProcessFlags : Uint4B</span><br><span class="line">+<span class="number">0x050</span> ProcessInJob     : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessInitializing : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessUsingVEH  : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessUsingVCH  : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessUsingFTH  : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessPreviouslyThrottled : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessCurrentlyThrottled : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ProcessImagesHotPatched : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x050</span> ReservedBits0    : Pos <span class="number">8</span>, <span class="number">24</span> Bits</span><br><span class="line">+<span class="number">0x054</span> Padding1         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x058</span> KernelCallbackTable : Ptr64 Void</span><br><span class="line">+<span class="number">0x058</span> UserSharedInfoPtr : Ptr64 Void</span><br><span class="line">+<span class="number">0x060</span> SystemReserved   : Uint4B</span><br><span class="line">+<span class="number">0x064</span> AtlThunkSListPtr32 : Uint4B</span><br><span class="line">+<span class="number">0x068</span> ApiSetMap        : Ptr64 Void</span><br><span class="line">+<span class="number">0x070</span> TlsExpansionCounter : Uint4B</span><br><span class="line">+<span class="number">0x074</span> Padding2         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x078</span> TlsBitmap        : Ptr64 Void</span><br><span class="line">+<span class="number">0x080</span> TlsBitmapBits    : [<span class="number">2</span>] Uint4B</span><br><span class="line">+<span class="number">0x088</span> ReadOnlySharedMemoryBase : Ptr64 Void</span><br><span class="line">+<span class="number">0x090</span> SharedData       : Ptr64 Void</span><br><span class="line">+<span class="number">0x098</span> ReadOnlyStaticServerData : Ptr64 Ptr64 Void</span><br><span class="line">+<span class="number">0x0a0</span> AnsiCodePageData : Ptr64 Void</span><br><span class="line">+<span class="number">0x0a8</span> OemCodePageData  : Ptr64 Void</span><br><span class="line">+<span class="number">0x0b0</span> UnicodeCaseTableData : Ptr64 Void</span><br><span class="line">+<span class="number">0x0b8</span> NumberOfProcessors : Uint4B</span><br><span class="line">+<span class="number">0x0bc</span> NtGlobalFlag     : Uint4B</span><br><span class="line">+<span class="number">0x0c0</span> CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class="line">+<span class="number">0x0c8</span> HeapSegmentReserve : Uint8B</span><br><span class="line">+<span class="number">0x0d0</span> HeapSegmentCommit : Uint8B</span><br><span class="line">+<span class="number">0x0d8</span> HeapDeCommitTotalFreeThreshold : Uint8B</span><br><span class="line">+<span class="number">0x0e0</span> HeapDeCommitFreeBlockThreshold : Uint8B</span><br><span class="line">+<span class="number">0x0e8</span> NumberOfHeaps    : Uint4B</span><br><span class="line">+<span class="number">0x0ec</span> MaximumNumberOfHeaps : Uint4B</span><br><span class="line">+<span class="number">0x0f0</span> ProcessHeaps     : Ptr64 Ptr64 Void</span><br><span class="line">+<span class="number">0x0f8</span> GdiSharedHandleTable : Ptr64 Void</span><br><span class="line">+<span class="number">0x100</span> ProcessStarterHelper : Ptr64 Void</span><br><span class="line">+<span class="number">0x108</span> GdiDCAttributeList : Uint4B</span><br><span class="line">+<span class="number">0x10c</span> Padding3         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x110</span> LoaderLock       : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class="line">+<span class="number">0x118</span> OSMajorVersion   : Uint4B</span><br><span class="line">+<span class="number">0x11c</span> OSMinorVersion   : Uint4B</span><br><span class="line">+<span class="number">0x120</span> OSBuildNumber    : Uint2B</span><br><span class="line">+<span class="number">0x122</span> OSCSDVersion     : Uint2B</span><br><span class="line">+<span class="number">0x124</span> OSPlatformId     : Uint4B</span><br><span class="line">+<span class="number">0x128</span> ImageSubsystem   : Uint4B</span><br><span class="line">+<span class="number">0x12c</span> ImageSubsystemMajorVersion : Uint4B</span><br><span class="line">+<span class="number">0x130</span> ImageSubsystemMinorVersion : Uint4B</span><br><span class="line">+<span class="number">0x134</span> Padding4         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x138</span> ActiveProcessAffinityMask : Uint8B</span><br><span class="line">+<span class="number">0x140</span> GdiHandleBuffer  : [<span class="number">60</span>] Uint4B</span><br><span class="line">+<span class="number">0x230</span> PostProcessInitRoutine : Ptr64     <span class="keyword">void</span> </span><br><span class="line">+<span class="number">0x238</span> TlsExpansionBitmap : Ptr64 Void</span><br><span class="line">+<span class="number">0x240</span> TlsExpansionBitmapBits : [<span class="number">32</span>] Uint4B</span><br><span class="line">+<span class="number">0x2c0</span> SessionId        : Uint4B</span><br><span class="line">+<span class="number">0x2c4</span> Padding5         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x2c8</span> AppCompatFlags   : _ULARGE_INTEGER</span><br><span class="line">+<span class="number">0x2d0</span> AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class="line">+<span class="number">0x2d8</span> pShimData        : Ptr64 Void</span><br><span class="line">+<span class="number">0x2e0</span> AppCompatInfo    : Ptr64 Void</span><br><span class="line">+<span class="number">0x2e8</span> CSDVersion       : _UNICODE_STRING</span><br><span class="line">+<span class="number">0x2f8</span> ActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class="line">+<span class="number">0x300</span> ProcessAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class="line">+<span class="number">0x308</span> SystemDefaultActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class="line">+<span class="number">0x310</span> SystemAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class="line">+<span class="number">0x318</span> MinimumStackCommit : Uint8B</span><br><span class="line">+<span class="number">0x320</span> SparePointers    : [<span class="number">4</span>] Ptr64 Void</span><br><span class="line">+<span class="number">0x340</span> SpareUlongs      : [<span class="number">5</span>] Uint4B</span><br><span class="line">+<span class="number">0x358</span> WerRegistrationData : Ptr64 Void</span><br><span class="line">+<span class="number">0x360</span> WerShipAssertPtr : Ptr64 Void</span><br><span class="line">+<span class="number">0x368</span> pUnused          : Ptr64 Void</span><br><span class="line">+<span class="number">0x370</span> pImageHeaderHash : Ptr64 Void</span><br><span class="line">+<span class="number">0x378</span> TracingFlags     : Uint4B</span><br><span class="line">+<span class="number">0x378</span> HeapTracingEnabled : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x378</span> CritSecTracingEnabled : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x378</span> LibLoaderTracingEnabled : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x378</span> SpareTracingBits : Pos <span class="number">3</span>, <span class="number">29</span> Bits</span><br><span class="line">+<span class="number">0x37c</span> Padding6         : [<span class="number">4</span>] UChar</span><br><span class="line">+<span class="number">0x380</span> CsrServerReadOnlySharedMemoryBase : Uint8B</span><br><span class="line">+<span class="number">0x388</span> TppWorkerpListLock : Uint8B</span><br><span class="line">+<span class="number">0x390</span> TppWorkerpList   : _LIST_ENTRY</span><br><span class="line">+<span class="number">0x3a0</span> WaitOnAddressHashTable : [<span class="number">128</span>] Ptr64 Void</span><br><span class="line">+<span class="number">0x7a0</span> TelemetryCoverageHeader : Ptr64 Void</span><br><span class="line">+<span class="number">0x7a8</span> CloudFileFlags   : Uint4B</span><br><span class="line">+<span class="number">0x7ac</span> CloudFileDiagFlags : Uint4B</span><br><span class="line">+<span class="number">0x7b0</span> PlaceholderCompatibilityMode : Char</span><br><span class="line">+<span class="number">0x7b1</span> PlaceholderCompatibilityModeReserved : [<span class="number">7</span>] Char</span><br><span class="line">+<span class="number">0x7b8</span> LeapSecondData   : Ptr64 _LEAP_SECOND_DATA</span><br><span class="line">+<span class="number">0x7c0</span> LeapSecondFlags  : Uint4B</span><br><span class="line">+<span class="number">0x7c0</span> SixtySecondEnabled : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">+<span class="number">0x7c0</span> Reserved         : Pos <span class="number">1</span>, <span class="number">31</span> Bits</span><br><span class="line">+<span class="number">0x7c4</span> NtGlobalFlag2    : Uint4B</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一些常见的静态反调试技术</summary>
    
    
    
    <category term="《逆向工程核心原理》笔记" scheme="https://4nsw3r.top/categories/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="反调试" scheme="https://4nsw3r.top/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>TLS 回调函数</title>
    <link href="https://4nsw3r.top/2021/07/27/TLS%20%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://4nsw3r.top/2021/07/27/TLS%20%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2021-07-27T10:31:51.543Z</published>
    <updated>2021-07-27T10:28:39.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TLS-回调函数"><a href="#TLS-回调函数" class="headerlink" title="TLS 回调函数"></a>TLS 回调函数</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>TLS(Thread Local Storage, 线程局部存储)回调函数，TLS 回调函数的调用运行要先于 EP 代码的执行，并且每次创建或结束线程都会再次调用，故常用于反调试。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span> <span class="params">(NTAPI *PIMAGE_TLS_CALLBACK)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID DllHandle, </span></span></span><br><span class="line"><span class="params"><span class="function">DWORD Reason, </span></span></span><br><span class="line"><span class="params"><span class="function">PVOID Reserved)</span></span>;</span><br></pre></td></tr></table></figure><p>其与 DllMain() 函数的定义十分相似。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="TLS-和-TLS-的特征"><a href="#TLS-和-TLS-的特征" class="headerlink" title="TLS 和 TLS 的特征"></a>TLS 和 TLS 的特征</h3><p>TLS 是各线程的独立的数据存储空间，使用 TLS 技术可以在线程内部独立使用或修改进程的全局数据或静态数据。</p><p>若启用 TLS 功能，PE 头文件中会设置 TLS 表（TLS Table）项目：</p><p><img src="/pictures/TLS%E8%A1%A8.jpg" alt="启用TLS功能"></p><p>未启用则是这样的：</p><p><img src="/pictures/TLS%E8%A1%A82.jpg" alt="未启用"></p><p>并且如果使用 IDA 打开，会在 Exports 选项卡看到 TlsCallBack 字样：</p><p><img src="/pictures/TLS%E8%A1%A83.jpg" alt="IDA中的TLS"></p><h3 id="TLS-调用原因（Reason）"><a href="#TLS-调用原因（Reason）" class="headerlink" title="TLS 调用原因（Reason）"></a>TLS 调用原因（Reason）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//winnt.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_ATTACH 1 <span class="comment">//进程创建</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_ATTACH  2 <span class="comment">//线程创建</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_DETACH  3 <span class="comment">//线程销毁</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_DETACH 4 <span class="comment">//进程销毁</span></span></span><br></pre></td></tr></table></figure><h3 id="TLS-回调函数代码示例"><a href="#TLS-回调函数代码示例" class="headerlink" title="TLS 回调函数代码示例"></a>TLS 回调函数代码示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本代码在vs2019x86平台上通过测试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">TLS_CALLBACK</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TLStest,Reason=%d\n&quot;</span>,Reason);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">&quot;.CRT$XLY&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK tls_callback_func = TLS_CALLBACK;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Thread start\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Thread stop\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start\n&quot;</span>);</span><br><span class="line">hThread=CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line">WaitForSingleObject(hThread, <span class="number">1</span>);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main stop\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对以上代码的解释：</p><ul><li><p><code>#pragma comment(linker,&quot;/INCLUDE:__tls_used&quot;)</code>作用是告知编译器使用 TLS 回调函数。其中，在 x86 环境下，使用<code>__tls_used</code>，而在x64环境下使用<code>_tls_used</code></p></li><li><p><code> TLS_CALLBACK</code>这个函数即是我们定义的 TLS 回调函数，遵照上面的函数定义即可。</p></li><li><p><code>#pragma data_seg(&quot;.CRT$XLY&quot;)</code>和<code>#pragma data_seg()</code>作用是注册回调函数，如果回调函数只有 1 个，则可以以上述形式编写代码即可，如果回调函数有多个，则可以声明一个数组，如<code>PIMAGE_TLS_CALLBACK tls_callback_func[] = &#123;TLS_CALLBACK1, TLS_CALLBACK2, 0&#125;;</code>注意数组最后一个元素必须为 0 。<code>WaitForSingleObject</code>这个函数作用是等待线程运行，否则 main 进程会先于 ThreadProc 线程结束，有可能 ThreadProc 线程还未运行，进程就结束了，运行结果就不太清晰</p></li><li><p>如果编译选项中开启了 /MT ，则 TLS 中的 printf 函数可能会出现错误，此时可以使用如下代码来防止出现问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">80</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">wsprintfA(<span class="built_in">string</span>,<span class="string">&quot;TLStest,reason=%d\n&quot;</span>,Reason);</span><br><span class="line">HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">WriteConsoleA(hStdout, <span class="built_in">string</span>, <span class="built_in">strlen</span>(<span class="built_in">string</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p>运行结果如下，可以看出其 Reason 对应的各种情况：</p><p><img src="/pictures/TLS%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt="运行结果"></p><h2 id="如何调试-TLS-回调函数"><a href="#如何调试-TLS-回调函数" class="headerlink" title="如何调试 TLS 回调函数"></a>如何调试 TLS 回调函数</h2><p>直接使用调试器打开带 TLS 回调函数的程序，则无法调试 TLS 回调函数，因为 TLS 早在 EP 代码开始前就被执行了，因此需要在调试器中打开<code>System breakpoint</code>选项，从而使程序暂停在系统启动断点<code>System Startup Breakpoint</code>处。有的调试器也提供”暂停在 TLS 回调函数处”的选项。</p></li></ul>]]></content>
    
    
    <summary type="html">关于 TLS 回调函数的分析和应用</summary>
    
    
    
    <category term="《逆向工程核心原理》笔记" scheme="https://4nsw3r.top/categories/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="TLS" scheme="https://4nsw3r.top/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>googleCTF RE-CPP解题思路</title>
    <link href="https://4nsw3r.top/2021/07/21/theSecond/"/>
    <id>https://4nsw3r.top/2021/07/21/theSecond/</id>
    <published>2021-07-21T10:29:32.175Z</published>
    <updated>2021-07-22T07:46:04.930Z</updated>
    
    <content type="html"><![CDATA[<p><code>__INCLUDE_LEVEL__</code>表示包含深度，和<code>#include&quot;cpp.c&quot;</code>构成递归，这个递归用处不大，只是在一次次根据S的值执行不同代码，可以不管他<br>通过对每个<code>#if</code>分析可得知每个块的功能<br><code>S</code>相当于<code>loc</code>，然后对<code>R</code>、<code>Z</code>、<code>X</code>等等做运算，根据结果进行跳转到不同<code>S</code><br>得到主要逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">I = <span class="number">0</span>;</span><br><span class="line">M = <span class="number">0</span>;</span><br><span class="line">N = <span class="number">1</span>;</span><br><span class="line">P = <span class="number">0</span>;</span><br><span class="line">Q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">B = <span class="number">0xE5</span>;<span class="comment">//1110 0101</span></span><br><span class="line">B = B + I;</span><br><span class="line"><span class="keyword">if</span> (B == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//if(Q==0) success</span></span><br><span class="line">B = <span class="number">0x80</span>;<span class="comment">//1000 0000</span></span><br><span class="line">B = B + I;</span><br><span class="line">L = B;</span><br><span class="line">A = RAM[B];</span><br><span class="line">L = I; B = RAM[I];</span><br><span class="line">R = <span class="number">1</span>;</span><br><span class="line">X = <span class="number">1</span>;</span><br><span class="line">Y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (X == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">Z = X;</span><br><span class="line">Z = Z &amp; B;</span><br><span class="line"><span class="keyword">if</span> (Z != <span class="number">0</span>)</span><br><span class="line">Y = Y + A;</span><br><span class="line">X = X + X;</span><br><span class="line">A = A + A;</span><br><span class="line">&#125;</span><br><span class="line">A = Y;</span><br><span class="line"></span><br><span class="line">R = ~R;</span><br><span class="line">Z = <span class="number">1</span>;</span><br><span class="line">R += Z;</span><br><span class="line">R += Z;</span><br><span class="line"></span><br><span class="line">O = M;</span><br><span class="line">O += N;</span><br><span class="line">M = N;</span><br><span class="line">N = O;</span><br><span class="line">A += M;</span><br><span class="line">B = <span class="number">0x20</span>;<span class="comment">//0010 0000</span></span><br><span class="line">B += I;</span><br><span class="line">L = B; C = RAM[L];</span><br><span class="line">A = A ^ C;</span><br><span class="line">P = P + A;</span><br><span class="line">B = <span class="number">0x40</span>;<span class="comment">//0100 0000</span></span><br><span class="line">B = B + I;</span><br><span class="line">L = B; A = RAM[L];</span><br><span class="line">A = A ^ P;</span><br><span class="line">Q |= A;</span><br><span class="line">I += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由前面的宏定义知flag长度为26，并且在上面的主要逻辑中可以看到flag是一位一位验证的，因此可以直接暴力跑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RAM0[][<span class="number">8</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RAM[<span class="number">0xFF</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">91</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">RAM[i] = RAM0[i][<span class="number">7</span>] * <span class="number">128</span> + RAM0[i][<span class="number">6</span>] * <span class="number">64</span> + RAM0[i][<span class="number">5</span>] * <span class="number">32</span> + RAM0[i][<span class="number">4</span>] * <span class="number">16</span> + RAM0[i][<span class="number">3</span>] * <span class="number">8</span> + RAM0[i][<span class="number">2</span>] * <span class="number">4</span> + RAM0[i][<span class="number">1</span>] * <span class="number">2</span> + RAM0[i][<span class="number">0</span>] * <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> A, B, C, I, L, M, N, O, P, X, Y, Z, Q, R;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a, b, c, i, l, m, n, o, p, x, y, z, q, r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = A;</span><br><span class="line">b = B;</span><br><span class="line">c = C;</span><br><span class="line">i = I;</span><br><span class="line">l = L;</span><br><span class="line">m = M;</span><br><span class="line">n = N;</span><br><span class="line">o = O;</span><br><span class="line">p = P;</span><br><span class="line">x = X;</span><br><span class="line">y = Y;</span><br><span class="line">z = Z;</span><br><span class="line">q = Q;</span><br><span class="line">r = R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A = a;</span><br><span class="line">B = b;</span><br><span class="line">C = c;</span><br><span class="line">I = i;</span><br><span class="line">L = l;</span><br><span class="line">M = m;</span><br><span class="line">N = n;</span><br><span class="line">O = o;</span><br><span class="line">P = p;</span><br><span class="line">X = x;</span><br><span class="line">Y = y;</span><br><span class="line">Z = z;</span><br><span class="line">Q = q;</span><br><span class="line">R = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">change();</span><br><span class="line">I = <span class="number">0</span>;</span><br><span class="line">M = <span class="number">0</span>;</span><br><span class="line">N = <span class="number">1</span>;</span><br><span class="line">P = <span class="number">0</span>;</span><br><span class="line">Q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">B = <span class="number">0xE5</span>;<span class="comment">//1110 0101</span></span><br><span class="line">B = B + I;</span><br><span class="line"><span class="keyword">if</span> (B == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//if(Q==0) success</span></span><br><span class="line">B = <span class="number">0x80</span>;<span class="comment">//1000 0000</span></span><br><span class="line">B = B + I;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">48</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">push();</span><br><span class="line">L = B; </span><br><span class="line">A = j;</span><br><span class="line">L = I; B = RAM[I];</span><br><span class="line">R = <span class="number">1</span>;</span><br><span class="line">X = <span class="number">1</span>;</span><br><span class="line">Y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (X == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">Z = X;</span><br><span class="line">Z = Z &amp; B;</span><br><span class="line"><span class="keyword">if</span> (Z != <span class="number">0</span>)</span><br><span class="line">Y = Y + A;</span><br><span class="line">X = X + X;</span><br><span class="line">A = A + A;</span><br><span class="line">&#125;</span><br><span class="line">A = Y;</span><br><span class="line"></span><br><span class="line">R = ~R;</span><br><span class="line">Z = <span class="number">1</span>;</span><br><span class="line">R += Z;</span><br><span class="line">R += Z;</span><br><span class="line"></span><br><span class="line">O = M;</span><br><span class="line">O += N;</span><br><span class="line">M = N;</span><br><span class="line">N = O;</span><br><span class="line">A += M;</span><br><span class="line">B = <span class="number">0x20</span>;<span class="comment">//0010 0000</span></span><br><span class="line">B += I;</span><br><span class="line">L = B; C = RAM[L];</span><br><span class="line">A = A ^ C;</span><br><span class="line">P = P + A;</span><br><span class="line">B = <span class="number">0x40</span>;<span class="comment">//0100 0000</span></span><br><span class="line">B = B + I;</span><br><span class="line">L = B; A = RAM[L];</span><br><span class="line">A = A ^ P;</span><br><span class="line">Q |= A;</span><br><span class="line"><span class="keyword">if</span> (Q == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pop();</span><br><span class="line">&#125;</span><br><span class="line">I += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可得flag：<code>CTF&#123;pr3pr0cess0r_pr0fe5sor&#125;</code></p>]]></content>
    
    
    <summary type="html">googleCTF2021的逆向题CPP解题思路</summary>
    
    
    
    <category term="虚拟机逆向" scheme="https://4nsw3r.top/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF-RE" scheme="https://4nsw3r.top/tags/CTF-RE/"/>
    
    <category term="宏逆向" scheme="https://4nsw3r.top/tags/%E5%AE%8F%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://4nsw3r.top/2021/07/21/hello-world/"/>
    <id>https://4nsw3r.top/2021/07/21/hello-world/</id>
    <published>2021-07-21T05:22:51.693Z</published>
    <updated>2021-07-21T10:58:18.566Z</updated>
    
    <content type="html"><![CDATA[<p>I’m 4nsw3r. Welcome to my Blog!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’m 4nsw3r. Welcome to my Blog!&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Introduction" scheme="https://4nsw3r.top/tags/Introduction/"/>
    
  </entry>
  
</feed>
